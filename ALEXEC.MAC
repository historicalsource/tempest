	.TITLE ALEXEC - ALIENS EXECUTIVE
	.SBTTL ******************************************
	.SBTTL *					*
	.SBTTL *MODULE:		ALEXEC			*
	.SBTTL *PROGRAMMER:	DAVE THEURER		*
	.SBTTL *FUNCTION:	ALIENS EXECUTIVE	*
	.SBTTL *					*
	.SBTTL ******************************************

	.REPT 0
DATE:		21-AUG-80
PROJECT #:	289
DISK #:		94, B37
LINK STRING:	ALGAME,ALDISP,ALHARD,ANVGUT,ALVRON
	.ENDR
	.NLIST
	.INCLUDE ALCOMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.LIST
	.PAGE
	.SBTTL GLOBLS
;
;ENTRY POINTS DEFINED HERE
;
	
	.GLOBL MAINLN,UPSCOR,COCFLI
;
;ENTRY POINTS DEFINED IN OTHER MODULES
;
	.GLOBL DISPLA,RESET,INIDSP,PRSTAR,PLDROP,PRBOOM,EAUPD,SYSTEM
	.GLOBL D70MSK,D07MSK
	.GLOBL INISOU,SAUSON,SSLAMS
	.GLOBL GETINI,HISCHK,INIRA0,INICHK
	.GLOBL PLAY,MOVCUR
	.GLOBL SWAPEN,CLRSCO,INEWAV,INEWLI,NEWAV2
	.GLOBL PRORAT,INIRAT
	.GLOBL BONSCO,LOGINI
	.SBTTL COLD START
	.CSECT
	.PAGE
	.SBTTL MAINLOOP

;INPUT:		POWER ON RESET PREPARATION
;OUTPUT:	NONE

MAINLN:	JSR INISOU		;INITIALIZE SOUNDS
	LDA I,CNEWGA
	STA QSTATE
	BEGIN			;MAINLOOP
	BEGIN			;LOOP UNTIL CURRENT FRAME HAS BEEN UP X MS.
	LDA FRTIMR
	CMP I,9
	CSEND
	LDA I,0			;RESTART FRAME TIMER
	STA FRTIMR
	JSR EXSTAT		;EXECUTE APPROPRIATE GAME STATE
	JSR NONSTA		;EXECUTE NON-STATE DEPENDENT CODE
	JSR DISPLA		;EXECUTE CODE TO DISPLAY NEW SCREEN
	CLC
	CSEND			;LOOP ALWAYS
	.PAGE
	.SBTTL STATE ROUTINE EXECUTOR

;INPUT:		QSTATE: CODE FOR STATE ROUTINE TO EXECUTE
;OUTPUT:	CONTROL PASSED TO ROUTINE

EXSTAT:
	LDA INOP0
	AND I,83
	CMP I,82
	IFNE			;FREEZE & FREE PLAY?
	JSR PRSTAR		;PROCESS STAR FIELD
	LDX QSTATE
	LDA SWFINA		;SET MUST PROCESS FLAG
	ORA I,MFAKE
	STA SWFINA
	LDA AX,ROUTAD+1
	PHA
	LDA AX,ROUTAD
	PHA
	ENDIF
NOOPR:	RTS
;
;STATE ROUTINE ADDRESS
;
ROUTAD:	.WORD NEWGAM-1		;NEW GAME
	.WORD NEWLIF-1		;NEW LIFE (AFTER LOSING A BASE)
	.WORD PLAY-1		;PLAY
	.WORD ENDLIF-1		;LIFE LOST
	.WORD ENDGAM-1		;END OF GAME
	.WORD PAUSE-1		;PAUSE
	.WORD 0			;NEW WAVE (AFTER SHOOTING ALL INVADERS)
	.WORD ENDWAV-1		;END OF WAVE
	.WORD HISCHK-1		;CHECK FOR HI SCORES
	.WORD GETINI-1		;GET HI SCORE INITIALS
	.WORD DLADR-1		;DISPLAY HI SCORE TABLE
	.WORD PRORAT-1		;REQUEST PLAYER RATE
	.WORD NEWAV2-1		;NEW WAVE PART 2
	.WORD LOGINI-1		;LOGO INIT
	.WORD INIRAT-1		;MONSTER DELAY/DISPLAY
	.WORD NEWLF2-1		;NEW LIFE PART 2
	.WORD PLDROP-1		;DROP MODE
	.WORD SYSTEM-1		;END WAVE CLEAN UP AFTER BONUS
	.WORD PRBOOM-1		;BOOM
ROUTEN:
	.PAGE
	.SBTTL PAUSE STATE

;INPUT:		QNXTSTA: CODE FOR STATE ROUTINE TO EXECUTE AFTER PAUSE
;		QTMPAUS: PAUSE TIMER (# OF X SECOND UNITS TO WAIT)
;		QFRAME: FRAME COUNTER
;
;OUTPUT:	QTMPAUS,QSTATE UPDATED

PAUSE:
	LDA QFRAME
	AND PSCALE
	IFEQ
	LDA QTMPAUS		;YES
	IFNE			;AT 0? (STOP AT 0)
	DEC QTMPAUS		;NO. DROP 1
	ENDIF
	IFEQ			;AT 0?
	LDA QNXTSTA		;YES. GO TO NEXT STATE
	STA QSTATE
	LDA I,0			;RESET STANDARD TIMER SCALE
	STA PSCALE
	ENDIF
	ENDIF
	JMP MOVCUR		;UPDATE CURSOR (IF ALIVE)
	.PAGE

	.SBTTL	PROCESS CREDITS
PROCRE:	LDA $$CRDT
	LDY I,0			;YES
	CMP I,2			;CC IF 1 CREDIT, CS IF 2 OR MORE
	LDA SWFINA
	AND I,MSTRT2!MSTRT1
	STY SWFINA
	IFNE			;EITHER START PRESSED?
	IFCC			;YES. 1 CREDIT?
	AND I,MSTRT1		;YES.
	ELSE
	INY			;NO. 2 OR MORE CREDITS
	DEC $$CRDT		;REMOVE 1 CREDIT
	AND I,MSTRT2
	ENDIF
	IFNE			;START?
	DEC $$CRDT		;YES. REMOVE A CREDIT
	INY
	ENDIF
	TYA
	STA NUMPLA		;SAVE # PLAYERS (0=ATTRACT)
	IFNE			;GAME?
	LDA QSTATUS
	ORA I,MATRACT!MGTMOD	;YES
	STA QSTATUS		;SET GAME MODE
	LDA I,0			;ZERO BONUS COUNTER
	STA $BCCNT
	STA $BC
	LDA I,CNEWGA
	STA QSTATE		;REQUEST NEW GAME STATE
	DEC NUMPLA		;SET # PLAYERS=0 OR 1
	LDX NUMPLA
	IFNE
	LDX I,3			;2 PLAYERS
	ENDIF
	INC X,NGAMIL		;UPDATE 1/2 GAME COUNT
	IFEQ
	INC X,NGAMIH
	ENDIF
	LDA NGAMES
	SEC
	ADC NUMPLA
	CMP I,NRANKS
	IFCS			;MAX OUT
	LDA I,NRANKS
	ENDIF
	STA NGAMES		;COUNT # GAMES
	ENDIF
	ELSE
	LDA TBHD		;ATTRACT MODE D-CREDITS
	IFNE			;TRYING TO PLAY?
	BIT QSTATUS		;YES
	IFPL			;ATTRACT?
	LDA I,CDPRST		;YES. PRESS START DISPLAY
	STA QDSTATE
	LDA I,020
	STA QTMPAUS
	LDA I,CPAUSE
	STA QSTATE
	LDA I,CDLADR		;DISPLAY LADDER
	STA QNXTSTA
	LDA I,0
	STA TBHD
	STA ELICNT		;CLEAR AVOID SPIKES DISPLAY
	ENDIF
	ENDIF
	ENDIF
	RTS
	.PAGE
	.SBTTL	NON-STATE DEPENDENT PROCESSING
NONSTA:
	LDA IN1
	AND I,MTEST
	IFEQ			;SYSTEM STATUS DISPLAY?
	LDA I,CSYSTM		;YES
	STA QSTATE
	ELSE
				;NO. PROCESS CREDITS
	BIT QSTATUS
	IFVC			;ATTRACT?
	LDA OPTIN2		;YES
	AND I,OM2GAM
	IFNE			;2 GAME MIN OPTION?
	LDY $$CRDT		;YES.
	IFEQ			;CREDITS?
	LDA I,80		;NO. SET 2 CREDITS MIN FLAG
	STA TCMFLG
	ENDIF
	BIT TCMFLG		;Y=CREDITS
	IFMI			;2 GAME MIN?
	CPY I,2			;YES.
	IFCC			;2 GAMES?
	TYA			;NO
	IFNE			;1 CREDIT?
	LDA I,CD2GAM		;YES
	STA QDSTATE
	LDA I,CPAUSE
	STA QSTATE
	ENDIF
	JMP NOSTART		;DISABLE START
	ELSE
	LDA I,CDLADR
	STA QSTATE
	LDA I,0			;NOT ANY MORE. ENABLE START
	STA TCMFLG
	ENDIF
	ENDIF
	ENDIF
	LDA $$CRDT		;YES.
	IFNE			;CREDITS?
	JSR PROCRE		;YES. PROCESS CREDITS
	ENDIF
NOSTART:	LDA $CMODE
	AND I,03
	IFEQ			;FREE PLAY?
	LDA I,2
	STA $$CRDT
	ENDIF
	ENDIF
	ENDIF
	INC QFRAME		;UPDATE FRAME COUNTER
	LDA QFRAME
	AND I,1
	IFNE
	JSR EAUPD		;PROCESS EAROM
	ENDIF
	LDA $LMTIM
	IFNE			;SLAM SWITCH ON?
	JSR SSLAMS		;SLAM SOUND
	ENDIF
ZQAT4C:	LDA QT2
	IFNE
	LDA I,19.
	CMP CURWAV
	IFCC
	SED
	ENDIF
	ENDIF
	LDA SWFINA
	AND I,MFAKE		;SWITCH PROCESSED THIS FRAME?
	IFNE
	LDA I,0			;NO. FAKE PROCESS
	STA SWFINA
	ENDIF
	RTS
	.PAGE
	.SBTTL PREP-NEW GAME

;FUNCTION

NEWGAM:	JSR INICHK		;INITIALIZE LANGUAGE PTRS, OPTIONS; CHECK FOR CHANGE
	JSR INIDSP		;INITIALIZE DISPLAY
	LDA QSTATUS
	IFMI			;ATTRACT?
	JSR CLRSCO		;NO. CLEAR SCORES
	ENDIF
	LDA I,0
	STA LIVES2		;ONE PLAYER GAME (DEFAULT: PLAYER 2 DEAD)
	LDX NUMPLA		;GIVE EACH PLAYER "NEW GAME" EQUIP
	STX PLAYUP
	BEGIN			;LOOP FOR EACH PLAYER IN GAME (1 OR 2)
	LDX PLAYUP
	LDA LVSGAM		;GET # LIVES
	STA AX,LIVES1		;INITIAL # OF LIVES (GUNS)
	LDA I,-1
	STA AX,WAVEN1		;FORCE REQUEST RATE STATE
	DEC PLAYUP
	MIEND			;ENDLOOP AFTER ALL PLAYERS PROCESSED
	LDA I,0
	STA NEWPLA		;START GAME WITH 1ST PLAYER UP.
	STA PLAGRO		;DEACTIVATE STAR FIELD
	LDA NUMPLA		;INDUCE "PLAY PLAYER 1" MESSAGE
	STA PLAYUP		;IF 2 PLAYER GAME.
	JMP INIRA0		;INITIALIZE FOR PLAYER RATE REQUEST
	.PAGE
	.SBTTL PREP-NEW LIFE

;FUNCTION:	NEW LIFE INITIALIZATION (LAST PLAYER LOST A BASE)
;INPUT:

SECOND	=20.		;FRAMES PER SECOND
NEWLIF:
	LDA I,CDPLAY
	STA QDSTATE		;DEFAULT
	LDA I,CNWLF2
	STA QSTATE
	STA QNXTSTA
	LDA NEWPLA
	CMP PLAYUP
	IFNE			;SAME PLAYER AS BEFORE?
	STA PLAYUP		;NO
	LDA QSTATUS
	IFMI			;ATTRACT?
	LDA I,CDPLPL		;NO.

	STA QDSTATE		;WARN PLAYER DISPLAY
	LDA I,CPAUSE
	STA QSTATE		;FOR 2 SECONDS
	LDA I,4*SECOND		;LONGER PAUSE
	LDY COCTAL
	IFNE			;COCKTAIL?
	LDA I,2*SECOND		;YES. NOT AS LONG
	ENDIF
	STA QTMPAUS		;(SWITCH PLACES)
	JSR SWAPEN		;SWAP ENEMIES
	ENDIF
	ENDIF
	JSR COCFLI		;COCKTAIL FLIP
	LDX PLAYUP
	LDA X,WAVEN1
	STA CURWAV		;PLAYER'S WAVE #
	JSR INEWLI		;INITIALIZE OBJECTS(DEACTIVATE)
	JMP INISOU		;SOUNDS OFF

	.PAGE
	.SBTTL PREP-NEW LIFE PART 2
NEWLF2:
	LDA I,CPLAY		;PLAY STATE FOR
	STA QNXTSTA		;GAME AFTER PAUSE
	LDA I,CDPLAY
	STA QDSTATE		;AND DISPLAY NOW
	LDA I,CPAUSE
	STA QSTATE
	LDA I,1*SECOND		;PAUSE
	STA QTMPAUS
	RTS
	.PAGE
	.SBTTL PREP-END OF WAVE SETUP STATE

ENDWAV:
	LDX PLAYUP
	LDA X,WAVEN1
	CMP I,98.
	IFCC			;MAX AT 99
	INC X,WAVEN1		;INCREMENT PLAYER'S WAVE #
	INC CURWAV
	ENDIF
	LDA I,CNEWV2
	STA QSTATE
	LDA X,BONUS
	IFNE			;BONUS?
	JSR BONSCO		;DETERMINE BONUS & UPDATE SCORE
	LDX I,-1		;INDICATE TEMPS HAVE BONUS
	JSR UPSCOR		;UPDATE SCORE
	JSR SAUSON		;MAKE NOISE
	ENDIF
				;FALL INTO NEW WAVE
	.PAGE
	.SBTTL PREP-NEW WAVE SETUP STATE

	JMP INEWAV		;INITIALIZE ENEMY POSITIONS
	.PAGE
	.SBTTL PREP-LOSS OF BASE PROCESS STATE

ENDLIF:
	LDA I,0*SECOND		;NORMALLY NO PAUSE
	STA QTMPAUS
	LDX PLAYUP
	DEC X,LIVES1		;DELETE ONE OF CURRENT PLAYER'S LIVES
	LDA LIVES1
	ORA LIVES2
	IFEQ			;BOTH DEAD?
	JSR ENDGAM		;YES. END GAME STATE (5 HI CHECK)
	ELSE
	LDX PLAYUP
	LDA X,LIVES1		;NO. AT LEAST 1 PLAYER IS ALIVE
	IFEQ			;CURRENT PLAYER DEAD?
	LDA I,CDGOVR		;YES. "GAME OVER PLAYER X"

	STA QDSTATE
	LDA I,2*SECOND		;LONGER PAUSE
	STA QTMPAUS
	ENDIF
	BEGIN			;LOOP UNTIL GET TO NEXT LIVE PLAYER
	LDA NUMPLA
	IFNE			;2 PLAYERS?
	LDA NEWPLA		;YES. SWITCH TO OTHER PLAYER
	EOR I,01
	STA NEWPLA
	ENDIF
	LDX NEWPLA
	LDA X,LIVES1		;TEST # OF BASES FOR OTHER PLAYER
	NEEND			;EXIT IF PLAYER IS ALIVE
	LDA I,CNEWLIF		;THEN NEW LIFE SETUP
	LDY X,WAVEN1
	INY
	IFEQ			;NEW GAME FOR NEXT PLAYER?
	LDA I,CINIRAT		;YES. INITIALIZE RATE REQUEST STATE
	ENDIF
	STA QNXTSTA
	LDA I,CPAUSE		;PAUSE FOR END OF LIFE TO SOAK IN
	STA QSTATE
	ENDIF
	RTS
	.PAGE
	.SBTTL PREP-END OF GAME PROCESS STATE

ENDGAM:
	LDA I,0
	STA HIWAVE
	LDX NUMPLA
				;LOOP FOR EACH PLAYER
	BEGIN
	LDA X,WAVEN1
	CMP HIWAVE
				;DETERMINE HIGHEST WAVE REACHED
	IFCS
	STA HIWAVE
	ENDIF
	DEX
	MIEND
	LDY HIWAVE
	IFNE
	DEC HIWAVE
	ENDIF
	LDA I,CDLADR
	BIT QSTATUS
	IFMI			;ATTRACT?
	LDA I,CHISCHK		;NO. TEST FOR HI SCORE
	ENDIF
	STA QSTATE		;REQUEST HI CHECK OR LADDER DISPLAY
	RTS

DLADR:	LDA QSTATUS
	AND I,^C<MATRACT!MGTMOD>
			;PUT INTO ATTRACT
	STA QSTATUS		;REQUEST DISPLAY OF LADDER
	LDA I,0			;
	STA NUMPLA		;RETURN TO PLAYER
	LDA I,CLOGO
	STA QNXTSTA		;REQUEST NEW GAME AFTER
	LDA I,CPAUSE		;A LONG DELAY
	STA QSTATE
	LDA I,0A0
	STA QTMPAUS
	LDA I,1			;DOUBLE TIME
	STA PSCALE
	LDA I,CDHITB
	STA QDSTATE
	RTS
	.PAGE
	.PAGE

	.SBTTL UTILITY-MASKS

D70MSK:	.BYTE 80,40,20,10,8,4,2,1
D07MSK:	.BYTE 1,2,4,8,10,20,40,80
	.PAGE
	.SBTTL	COCKTAIL FLIP
				;
				;INPUT: COCTAL NOT 0 IF COCKTAIL GAME
				;OUTPUT: FLIP BIT SET IF COCKTAIL & PLAYER?
				;	OTHERWISE IT IS CLEARED.
COCFLI:	LDY I,MVINVY
	LDA COCTAL
	IFNE			;COCKTAIL GAME?
	LDA PLAYUP		;YES.
	IFNE			;PLAYER 2?
	LDA I,MFLIP		;YES. FLIP SCREEN.
	LDY I,MVINVX
	ENDIF			;UNFLIP IF PLAYER 1 OR NOT COCKTAIL
	ENDIF
	EOR TNKOUT
	AND I,MFLIP
	EOR TNKOUT
	STA TNKOUT		;SET/CLEAR BIT
	STY TOUT0
	RTS
	.PAGE
	.PAGE
	.PAGE
	.SBTTL SCORE-CLEAR

CLRSCO:				;CLEAR BOTH SCORES
	LDA I,0
	LDX I,5
	BEGIN			;LOOP FOR L,M & H BYTES OF BOTH SCORES
	STA X,LSCORL
	DEX
	MIEND
	RTS


	.SBTTL SCORE-ENEMY POINTS, GENERAL SCORE UPDATE

;FUNCTION:	GIVE POINTS FOR ENEMY SHOT DOWN
;
;INPUT:	X=INDEX OF PTS TO ADD (IF OUT OF TABLE THEN
;ADD PTS IN TEMP0,1,&2

UPSCOR:
	SED
	BIT QSTATUS
	IFMI			;ATTRACT?
	LDY PLAYUP
	IFNE			;NO.
	LDY I,3			;PLAYER 2?
	ENDIF			;YES
	CPX I,TUPSLE-TUPSCL
	IFCS			;BONUS IN TABLE?
	LDA TEMP0		;NO. IN TEMPS
	CLC
	ADC Y,LSCORL
	STA Y,LSCORL
	LDA TEMP1
	ADC Y,LSCORM
	STA Y,LSCORM
	LDA TEMP2
	ELSE
	LDA AX,TUPSCL		;ADD IN L,M AND H BYTES FROM
	CLC			;SCORE TABLE TO CORRECT
	ADC AY,LSCORL		;PLAYER'S SCORE
	STA AY,LSCORL
	LDA AX,TUPSCM
	ADC AY,LSCORM
	STA AY,LSCORM
	LDA I,0
	ENDIF
	PHP
	ADC AY,LSCORH
	STA AY,LSCORH
	PLP
				;GIVE BONUS FOR BIG PTS.
	IFNE			;BIG BONUS?
	LDX BLIFIN		;YES
	IFNE			;BONUS ALLOWED?
	CPX TEMP2		;YES.
	BEQ GIVBON
	BCC GIVBON		;BONUS >= INTERVAL?
	ENDIF
	ENDIF
	IFCS			;PASS 10K BOUNDARY?
	LDX BLIFIN		;YES. ET BONUS LIFE INTERVAL (IN 10 K UNITS)
	IFNE			;BONUS ALLOWED?
	CPX I,3		;YES.
	IFCS			;OVER 20 K INTERVAL?
	BEGIN			;DIVIDE BY INTERVAL
	SEC
	SBC BLIFIN
	BEQ GIVBON		;BRANCH IF NO REMAINDER
	CCEND			;EXIT IF REMAINDER
	ELSE
	CPX I,2		;20 K INTERVAL?
	IFEQ
	AND I,1		;YES.
	BEQ GIVBON
	ELSE
GIVBON:				;10 K INTERVAL
	LDX PLAYUP		;YES. GIVE BONUS LIFE
	LDA X,LIVES1
	CMP I,6
	IFCC			;MAX AT 6
	INC X,LIVES1
	JSR SAUSON		;MAKE BONUS SOUND
	LDA I,20
	STA BOFLASH		;REQUEST BONUS LIFE FLASH
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	SEC
	ENDIF
	ENDIF
	CLD
	RTS
TUPSCL:	.BYTE  00,50,0,0,50,50,0,50
TUPSLE:
TUPSCM:	.BYTE  0,1,02,1,0,2,5,7
	HLL65
	.END

                                                                                                                                                                                                                                                                                       