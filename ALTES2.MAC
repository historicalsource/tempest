	.TITLE ALTEST
	.SBTTL	****************************************
	.SBTTL	*					*
	.SBTTL	*MODULE: ALTEST				*
	.SBTTL	*PROGRAMMER: DAVE THEURER		*
	.SBTTL	*FUNCTION: ALIENS SELF-TEST FUNCTIONS	*
	.SBTTL	*					*
	.SBTTL	*****************************************
	.NLIST
	.INCLUDE ALCOMN		;<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.LIST
	.INCLUDE VGMC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.SBTTL DATABASE
	.GLOBL RESET,SYSTEM,DSPSYS	;ENTRY POINT
	.GLOBL VGCNTR,VGADD2,VGHEX,VGVTR1,DIGITS,VGMSGA,VGSCA1
	.GLOBL RESET,VGHALT,VGJSRL,INTEST,VGSTAT,CHEKER,DIGTYS,MAINLN,REHIIN
	.GLOBL EAZERO,COCMSG,EAFLG,EABAD,EASING,EAUPD,HYSTER,HATCH,ROMRPI
	.GLOBL DSPCRD,LIFE1,BOKLIT,LIFEY,GETOP3
	.GLOBL EAZHIS,EAZBOO,DISPLAY,INILIT,SYSOPT,INIINI,GINICO,VGSTA1,EAZFLG,EAREQU
	.GLOBL QCHKSB,BONDRY,INIDSP,VGVTR,VGSCAL,VGSCAL,VORBOX
	.CSECT
MBCOND	=CBUF1
RAMCND	=MBCOND+1
PK1CND	=RAMCND+1
PK2CND	=PK1CND+1
EARCND	=PK2CND+1
CHKSMS	=EARCND+1
	.PAGE
	.SBTTL	SYSTEM INFO -

SYSTEM:
	LDA I,0			;STOP GAME
	STA QSTATUS
	LDA I,CDSYST
	STA QDSTATE			;SYSTEM DISPLAY STATE
	LDA EAFLG
	IFEQ				;EAROM BUSY?
	LDA IN1				;NO
	AND I,MTEST
	IFNE				;ALL DONE?
	LDA I,CNEWGA			;YES. BACK TO GAME
	STA QSTATE
	LDA EABAD
	AND I,3
	IFNE				;INITIALIZE SCORE STUFF?
	JSR INIINI			;YES
	ENDIF
	ENDIF
	ENDIF
	RTS
	.SBTTL	SYSTEM DISPLAY STATE ROUTINE
DSPSYS:
	JSR INILIT			;SET UP LANGUAGE PTR
	JSR DSPCRD			;COIN MODE STUFF
	JSR DOPSWI			;DISPLAY BINARY OPTION SWITCHES
	JSR DBOOKE			;BOOKEEPING
					;DISPLAY LIVES/GAME
	LDA LVSGAM		;GET # LIVES
	STA INDEX1
	JSR VGCNTR
	LDA I,0E8
	LDX I,0C0
	JSR VGVTR1		;POSITION BEAM
	BEGIN			;LOOP FOR EACH LIFE PICTURE
	LAH LIFEY+1
	LXL LIFEY
	JSR VGJSRL		;DRAW LIFE PIC
	DEC INDEX1
	EQEND
	LDA OPTIN3		;EASY/MED/HARD DISPLAY
	AND I,3
	ASL
	TAY
	LDA Y,SYSOPT+9
	LDX Y,SYSOPT+8
	JSR VGJSRL
	.SBTTL	SYSTEM INFO - SPECIAL OPTIONS

	LDA CURSL1		;UPDATE CURSOR
	JSR GINICO
	STA CURSL1
	AND I,06
	PHA
	TAY
	LDA Y,SYSOPT+1
	LDX Y,SYSOPT
	JSR VGJSRL		;DISPLAY OPTIONS (SELF TEST ZERO EAROM)
	PLA
	LSR
	TAX
	LDA SWSTAT
	AND X,OPTMSK
	CMP X,OPTMSK
	IFEQ			;OPTION SELECTED?
	DEX			;YES.
	DEX
	IFMI
	JMP RESET		;SELF TEST OPTION
	ENDIF
	IFEQ
	JSR EAZBOO		;ZERO TIMES OPTION
	ELSE
	JSR EAZHIS		;ZERO HI SCORES OPTION
	LDA EABAD
	ORA I,3
	STA EABAD		;INDUCE HI SCORE INIT
	ENDIF
	ENDIF
	LDA EAFLG
	AND EAZFLG
	IFNE			;EAROM BUSY?
	LAH EASING+1
	LXL EASING		;YES. ERASING
	JSR VGJSRL
	ENDIF
	.SBTTL	SYSTEM INFO
				;MECH MULTIPLIERS
	JSR VGCNTR
	LDA OPTIN1
	AND I,1C
	LSR
	LSR
	TAX
	LDA X,CRMECHT
	LDY I,-72./4
	LDX I,1B
	JSR POSDIG
				;BONUS ADDER
	LDA OPTIN1
	LSR
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA X,BONADR
	LDY I,32
	LDX I,-32./4
POSDIG:	STA TEMP0
	TYA
	JSR VGVTR1		;POSITION BEAM
	LDA I,TEMP0
	LDY I,1
	JMP DIGTYS
OPTMSK:	.BYTE MFIRE!MSUZA,MFIRE!MSUZA,MFIRE!MSTRT1,MFIRE!MSTRT2
CRMECHT:	.BYTE 11,14,15,16,21,24,25,26
BONADR:		.BYTE 0,12,14,24,15,13,0,0
	.PAGE
	.SBTTL	REPORT BAD RAM
				;BAD 0 PAGE RAM
				;
HIBAD:	TAY			;BAD BITS
	LDA I,0			;BAD BLOCK #
				;AC=BAD RAM BLOCK
				;Y=BAD BITS (NOT 0)
BRAMREP:	STY RAMCND
	LSR
	LSR
	ASL			;*2
	TAX
	TYA
	AND I,0F
	IFEQ
	INX			;+1 IF MSB NIBBLE BAD AND LSB GOOD
	ENDIF
	TXS
	BEGIN
	LDA I,0A2		;SET UP POKEY AMPLITUDE/NOISE
	STA AUDC1
				;LOOP UNTIL BAD NIBBLE IS PROCESSED
	TSX
	IFEQ			;BAD NIBBLE?
	LDA I,060		;YES. BAD (HI) TONE
	LDY I,9			;     BAD (LONG) DELAY
	ELSE
	LDA I,0C0		;NO. GOOD (LO) TONE
	LDY I,1			;    GOOD (SHOT) DELY
	ENDIF
	STA AUDF1		;SOUND ON
	LDA I,LEDOFF		;LED OFF
	STA OUTANK
	LDX I,0
	BEGIN			;DELAY LOOP-LONG OR SORT
	BEGIN
	BEGIN
	BIT IN1
	PLEND
	BEGIN
	BIT IN1
	MIEND
	STA WTCHDG
	DEX
	EQEND
	DEY
	EQEND
	STX AUDC1		;SOUND OFF
	LDA I,0
	STA OUTANK		;LED ON
	LDY I,9
	BEGIN			;DELAY LOOP-FIXED LENGTH-LONG
	BEGIN
	BEGIN
	BIT IN1
	PLEND
	BEGIN
	BIT IN1
	MIEND
	STA WTCHDG
	DEX
	EQEND
	DEY
	EQEND
				;
	TSX			;UPDATE RAM COUNT
	DEX			;
	TXS
	MIEND			;EXIT AFTER BAD NIBBLE IS PROCESSED
	JMP ROMTST
				;
				;
				;
				;BAD NON 0 PAGE RAM
				;
HIRBAD:				;ACC=TEST PATTERN
	EOR NY,0		;PUT BAD BITS INTO Y
HIRBD2:	TAY
	LDA 1
	CMP I,VECRAM/100
	IFCS			;VECTOR RAM?
	SBC I,<VECRAM-800>/100	;YES.
	ENDIF
	AND I,1F		;BAD RAM BLOCK
	JMP BRAMREP		;REPORT BAD RAM
	.PAGE
	.SBTTL	SELF TEST ENTRY

RESET:
SFTEST:
	SEI			;NO INTERRUPTS
	STA WTCHDG		;KICK DOG
	STA VGSTOP
	LDX I,0FF
	TXS			;SET STACK PTR TO TOS
	CLD
	INX
	TXA
	TAY
	BEGIN			;LOOP FOR EACH RAM PAGE (IN X)
	STY 0
	STX 1
	LDY I,0
	BEGIN			;LOOP FOR EACH CELL IN PAGE
	STA NY,0		;ZERO CELL
	INY
	EQEND
	INX
	CPX I,8
	IFEQ
	LDX I,VECRAM/100
	ENDIF
	CPX I,<VECRAM+1000>/100	;DONE WITH VECTOR RAM?
	STA WTCHDG
	CSEND
	 			;YES. ZERO INDIRECT PTRS.
	STA 1
				;
	STA OUTANK		;TURN ON LEDS
	STA AUDF1+0F		;INITIALIZE POKEYS
	STA AUDF2+0F
	LDX I,7
	STX AUDF1+0F
	STX AUDF2+0F
	INX
	BEGIN			;LOOP FOR EACH CHANNEL
	STA X,AUDF1
	STA X,AUDF2
	DEX
	MIEND
	LDA IN1
	AND I,MTEST
	IFNE			;CONTINUE SELF TEST?
	BEGIN			;LOOP FOR 400 MS SO
	BEGIN			;EAROM GETS ENOUGH JUICE
	STA WTCHDG
	DEC 100
	EQEND
	DEC 101
	EQEND
	LDA I,MVINVY		;INIT SCREEN FLIP
	STA TOUT0
	JSR REHIIN		;NO. READ EAROM
	JSR INIINI		;INITIALIZE HI SCORE STUFF
	JSR INIDSP		;SET UP DISPLAY
	CLI			;
	JMP MAINLN		;GO TO ATTRACT MODE
	.BYTE 0A0			;*****FILLER
	ENDIF

	.SBTTL	ZERO PAGE TEST

;ON ENTRY ALL RAM IS 0
	LDX I,11		;STARTING PATTERN
	BEGIN			;LOOP FOR EACH PATTERN
	TXS
	LDY I,0
	BEGIN			;LOOP FOR EACH TEST CALL
	TSX
	STX Y,0			;PATTERN TO TEST CALL
	LDX I,1
	BEGIN			;LOOP FOR ALL OTHER TEST CALLS
	INY
	LDA Y,0
	IFNE			;NOT 0?
JMPHIB:	JMP HIBAD		;YES. ERROR
	ENDIF
	INX
	EQEND
	TSX
	TXA
	STA WTCHDG		;KICK DOG
	INY
	EOR Y,0
	BNE JMPHIB		;ERROR IF NOT 0
	STA Y,0			;CLEAR TEST CELL
	INY
	EQEND
	TSX
	TXA
	ASL			;SHIFT PATTERN
	TAX
	CSEND
	.SBTTL	NON ZERO PAGE RAM TEST
	LDY I,0			;START AT PAGE 1
	LDX I,1
	BEGIN
	STY 0			;SET INDIRECT PTR. TO 1ST TEST CELL IN PAGE
	STX 1
	LDY I,0
	BEGIN			;LOOP FOR EACH TEST CELL IN RAM PAGE
	LDA NY,0
	IFNE			;NOT 0?
	JMP HIRBD2		;YES. ERROR
	ENDIF
	LDA I,11
	BEGIN			;LOOP FOR ECH PATTERN INTO TEST CELL
	STA NY,0		;STORE PATTERN TO TEST CELL
	CMP NY,0		;COMPARE TEST CELL WITH PATTERN
	IFNE			;NOT 0?
	JMP HIRBAD		;YES. ERROR
	ENDIF
	ASL			;NEXT PATTERN
	CSEND
	LDA I,0
	STA NY,0		;CLEAR TEST CELL
	INY			;NEXT TEST CELL
	EQEND
	STA WTCHDG
	INX			;POINT TO NEXT PAGE
	CPX I,8
	IFEQ			;PAGES 1 TO 7
	LDX I,VECRAM/100
	ENDIF
	CPX I,<VECRAM+1000>/100	;AND 20 TO 2F
	CSEND
	.PAGE
	.SBTTL	ROM TEST
ROMTST:
	LDA I,0
	TAY			;INDEX INTO PAGE
	TAX			;CHECKSUM INDEX & ROM COUNTER
	STA INDYLO
	LDA I,ROMSTART/100	;SET POINTER TO START OF 1ST ROM
	STA INDYHI
	BEGIN			;LOOP FOR EACH ROM
	LDA I,8			;SET COUNTER FOR 8 PAGES IN ROM
	STA INDEX2
	TXA			;GET SEED FOR ROM
	BEGIN			;LOOP FOR EACH PAGE IN ROM
	BEGIN			;LOOP FOR EACH BYTE IN PAGE
	EOR NY,INDYLO		;UPDATE CHECKSUM
	INY
	EQEND
	INC INDYHI		;NEXT PAGE IN ROM
	STA A,WTCHDG		;KICK DOG
	DEC INDEX2
	EQEND
	STA X,CHKSMS		;SAVE CHECKUM OF ROM
	INX
	CPX I,2
	IFEQ			;PROGRAM ROM NOW?
	LDA I,PROG/100		;YES
	STA INDYHI
	ENDIF
	CPX I,NROMS		;DONE YET?
	CSEND
				;MAKE SOUND IF VG ROM IS BAD
	LDA CHKSMS
	IFNE			;BAD VG ROM?
	LDA I,40		;YES. MAKE CONTINUIOUS TONE
	LDX I,0A4
	STA AUDF1+4
	STX AUDC1+4
	ENDIF
	.PAGE
	.SBTTL TEST POKEYS,EAROM
				;
				;TEST BOTH POKEYS FOR RANDOM #S
				;
	LDX I,5
	LDA RANDOM
	BEGIN
	CMP RANDOM
	BNE OK1
	DEX
	MIEND
	STA PK1CND		;BAD POKEY 1
OK1:	LDX I,5
	LDA RANDO2
	BEGIN
	CMP RANDO2
	BNE OK2
	DEX
	MIEND
	STA PK2CND		;BAD POKEY 2
OK2:	JSR REHIIN		;READ IN EAROM
	LDY I,2			;DEFAULT GOOD
	LDA EABAD
	IFNE			;BAD EAROM?
	STA EARCND		;BAD EAROM FLAG
	JSR EAZERO		;YES. ERASE EAROM
	LDY I,0
	STY EABAD
	ENDIF
	STY QSTATE
	LDX I,07		;SET UP COLOR RAM
	BEGIN
	LDA X,TABCOL
	STA X,COLPOR
	DEX
	MIEND
	LDA I,0			;INIT CONTROLS FLIP
	STA OUTANK
	LDA I,MVINVY		;INIT SCREEN FLIP
	STA OUT0
	.PAGE
	.PAGE
	.SBTTL MAIN DIAG LOOP
	BEGIN			;MAIN SELF TEST DIAGNOSTIC LOOP
	LDY I,4
	BEGIN
	LDX I,14
	BEGIN			;LOOP FOR 7 MS
	BEGIN
	BIT IN1
	MIEND
	BEGIN
	BIT IN1
	PLEND
	DEX
	MIEND
	DEY
	BMI TIMEST		;BR ABORT IF TOO LONG
	STA WTCHDG
	BIT IN1
	VSEND
TIMEST:	STA VGSTOP
	LDA I,VECRAM&0FF	;SET POINTER TO TOP OF VECTOR RAM
	STA VGLIST
	LDA I,VECRAM/100
	STA VGLIST+1
	STA POTGO
	LDA ALLPOT
	STA OTB
	AND I,0F
	STA TBHD		;READ POT
	LDA IN1
	EOR I,0FF
	AND I,MCOINL!MCOINC!MCOINR!$LMBIT!MDITES
	STA SWFINA
	AND I,$LMBIT!MDITES
	IFNE			;TEST DIAGNOSTIC SWITCH PRESSED?
	ASL DBSW		;YES.
	IFCS			;DEPRESSED LONG ENOUGH?
	INC QSTATE		;YES. INCREMENT DIAGNOSTIC STATE
	INC QSTATE
	ENDIF
	ELSE
	LDA I,20		;NOT PRESSED. RESTART PRESSED TIMER
	STA DBSW
	ENDIF
	JSR SSTATE		;EXECUTE APPROPRIATE SELF TEST STATE
	JSR VGHALT		;PLACE HALT AT END OF DISPLAY LIST
	STA VGSTART
	INC QFRAME
	LDA QFRAME
	AND I,3
	IFEQ
	JSR EAUPD		;UPDATE EAROM EVERY 4*16 MS IF NECESSARY
	ENDIF
	LDA IN1
	AND I,MTEST
	NEEND			;EXIT LOOP IF SELF TEST SWITCH IS OFF
WDGTST:	BNE WDGTST		;GO BACK TO RESET VIA WATCH DOG RESET
TABCOL:	.BYTE ZWHITE,ZYELLO,ZPURPL,ZRED,ZTURQOI,ZGREEN,ZBLUE,ZBLUE
	.PAGE
	.SBTTL	SELF TEST SUBROUTINE ON CASE GOSUB
SFTJSR:
	.WORD BADEAR-1		;BAD EAROM
	.WORD ROMREP-1		;REPORT ON ROM, MATH BOX
	.WORD SHATCH-1		;CROSS LATCH, ALPHABET
	.WORD SHYSTER-1		;HYSTERESIS
	.WORD SINTEN-1
	.WORD SCHEKR-1		;CHECKERS
	.WORD SIGANA-1		;SIGNATURE ANALYSIS
SFTJSE:
SSTATE:
	LDX QSTATE
	CPX I,SFTJSE-SFTJSR
	IFCS
	LDX I,2
	STX QSTATE
	ENDIF
	LDA X,SFTJSR+1
	PHA
	LDA X,SFTJSR
	PHA
NOOPR:	RTS
	.PAGE
	.SBTTL	SIGNATURE ANALYSIS
SIGANA:
	LDA I,0			;CLOSE SIGNATURE WINDOW
	STA OUTANK		;SAEN23 (ENABLE FOR SA)
	STA MBSTAR		;CLOCK IT
	STA POKEY
	STA POKEY2
	STA EADAL
	STA EACTL
	LDA MSTAT
	LDA MYLOW
	LDA MYHIGH
	LDA EAIN
	LDA I,8			;****
	STA OUTANK		;OPEN SIGNATURE WINDOW
	LDA I,1
	LDX I,1F
	CLC
	BEGIN
	STA X,MBSTAR		;SCAN MB MAPPING PROM
	ROL
	DEX
	MIEND
	LAH BONDRY+1
	LXL BONDRY
	JMP VGJSRL		;DRAW BIG BOX ON SCREEN
	.PAGE
	.SBTTL	BAD EAROM RECOVERY
BADEAR:
	LDA EAFLG
	ORA EAREQU
	IFEQ			;DONE ERASING?
	JSR REHIIN		;YES. TRY TO READ AGAIN
	LDA EABAD
				;STILL BAD?
	STA EARCND		;YES. SET BAD EAROM FLAG
	LDA I,2			;GO TO REPORT STATUS STATE
	STA QSTATE
	ENDIF
	RTS
	.PAGE
	.SBTTL	CROSS HATCH, INTENSITY TEST PATTERNS
SCHEKR:
	LDA TBHD
	LSR
	TAY
	LDA I,68
	JSR VGSTAT		;SET COLOR
	LXL CHEKER
	LAH CHEKER+1
	BNE JSRVGJ		;JSRL TO CHECKER BOARD
SINTEN:
	LXL INTEST
	LAH INTEST+1
	BNE JSRVGJ		;INTENSITY TEST
SHATCH:
	LAH HATCH+1
	LXL HATCH
JSRVGJ:	JSR VGJSRL		;CROSS HATCH & ALPHABET
NOSOUN:	LDX I,6		;TURN OFF ALL SUNDS
	LDA I,0
	BEGIN
	STA X,AUDC1
	STA X,AUDC2
	DEX
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL	SOUND TEST
SHYSTER:
	LDA QFRAME
	AND I,3F
	IFEQ
	INC INDEX3		;UPDATE TIMER
	ENDIF
	LDA INDEX3
	AND I,7
	TAX
	LDY X,SNDTBL-1
	LDA I,0
	STA Y,AUDC1		;TURN OFF OLD CHANNEL
	LDY X,SNDTBL
	LDA X,SNDFRQ
	STA Y,AUDF1		;TURN ON NEW CHANNEL
	LDA I,0A8
	STA Y,AUDC1
	LAH HYSTER+1
	LXL HYSTER
	JSR VGJSRL		;HYSTERESIS
	LDA QFRAME		;TEST LINEAR SCALE
	AND I,7F
	TAY			;RAMP LINEAR SCALE
	LDA I,1			;BINARY SCALE
	JSR VGSCAL
	LAH VORBOX+1
	LXL VORBOX
	JMP VGJSRL		;VARY BOX SIZE
	.BYTE 16		;PART OF SNDTBL (UNDERFLOW)
SNDTBL:	.BYTE 0,10,2,12,4,14,6,16,0
	NOP
;*****IT IS IMPERATIVE THAT GETOP3 BE AT OFFSET 3FF
GETOP3:			;GET OPTION SWITCH 3 INTO ACC
	STA POTGO2
	LDA ALLPO2		;READ LOW 3 BITS OF 3RD SWITCH
	AND I,MOPT13
	STA INDEX1
	STA POTGO
	LDA ALLPOT		;READ HIGH BIT OF 4 IN 3RD SWITCH
	AND I,MOPTI4
	LSR
	LSR
	ORA INDEX1		;MERGE
	RTS
	.PAGE
	.SBTTL	REPORT ROM,MATHBOX,EAROM PROBLEMS
ROMREP:
;START MATH BOX TEST
	LDA TEMPX		;DIVIDE TEMPX,Y BY TEMPX,Y
	IFNE			;NO DIVIDE BY 0 PLEASE
	STA MXPL
	STA MZLL
	LDA TEMPY
	STA MXPH
	LDX I,0
	JSR READMB		;DO DIVIDE
	CMP I,1
	BNE BADBOX		;BRANCH IF RESULTS NOT CORREST
	TYA
	BNE BADBOX		;BRANCH IF RESULTS WRONG
	TXA
	IFMI			;TIMED OUT?
				;YES
BADBOX:	LDA I,0FF		;NO
	STA MBCOND		;BAD MATHBOX
	ENDIF
	ENDIF
 	 		;UPDATE DIVISOR & DIVIDEND
	LDX I,0			;(USE LATER FOR SOUNDS)
	STX VGBRIT
	INC TEMPX
	IFEQ
	INC TEMPY
	IFMI
	STX TEMPY
	ENDIF
	ENDIF
	
;END MATH BOX TEST
;START SWITCH TEST
	STA POTGO2
	LDA ALLPO2
	AND I,MSTRT1!MSTRT2!MSUZA!MFIRE
	STA SWSTAT
	IFNE			;ANY SWITCHES PRESSED?
	STA AUDF1		;YES. MAKE SOUND
	LDX I,0A4
	ENDIF
	STX AUDC1
	LDX I,0
	LDA SWFINA
	IFNE			;SWITCHES PRESSED?
	ASL
	STA AUDF1+2		;YES. MAKE SOUND
	LDX I,0A4
	ENDIF
	STX AUDC1+2
	JSR DOPSWI		;DISPLAY OPTION SWITCHES
				;
	LDY SWSTAT
	LDA I,0D0
	LDX I,0F0
	JSR GENOPD		;DISPLAY SWITCHES
	LDY SWFINA
	JSR BITS2		;DISPLAY SWITCHES
;END SWITCH TEST
	LDA OTB
	AND I,COCKTA
	IFNE			;COCKTAIL?
	LAH COCMSG+1		;YES. DISPLAY A C IN CORNER
	LXL COCMSG
	JSR VGJSRL
	LDY I,MVINVY		;DEFAULT NO XY FLIP
	LDA SWSTAT
	AND I,MSTRT1!MSTRT2
	IFNE			;EITHER START PRESSED?
	EOR I,MSTRT1		;YES.
	IFNE			;START 2?
	LDA I,MFLIP		;YES. FLIP SCREEN TO PLAYER 2
	LDY I,MVINVX
	ENDIF			;NO. FLIP TO PLAYER 1
	STA OUTANK
	STY OUT0
	ENDIF
	ENDIF
	LAH ROMRPI+1
	LXL ROMRPI
	JSR VGJSRL		;HORIZ LINE & POSITION FOR ROM REPEAT
	LDX I,NROMS-1
	BEGIN			;LOOP FOR EACH ROM
	LDA X,CHKSMS
	IFNE			;BAD CHECKSUM?
	STA SAVEX		;YES.
	STX INDEX2
	TXA
	JSR VGHEX		;DISPLAY ROM #
	LDY I,-48./4
	LDX I,-48./4
	LDA SAVEX
	JSR POSDIG		;POSITION & DISPLAY CHECKSUM
	LDA I,48./4
	TAX
	JSR VGVTR1		;SPACE BACK & DOWN
	LDX INDEX2
	ENDIF
	DEX
	MIEND
				;
	JSR VGCNTR
	LDA I,0
	LDX I,88./4
	JSR VGVTR1		;POSITION BEAM
	LDX I,4
	STX INDEX1
	BEGIN			;LOOP FOR EACH STATUS
	LDX INDEX1
	LDY I,0			;DEFAULT GOOD (BLANK)
	LDA X,MBCOND
	IFNE			;GOOD?
	LDY X,BADNWS		;NO. BAD. GET LETTER
	ENDIF
	LDA Y,VGMSGA
	LDX Y,VGMSGA+1
	JSR VGADD2		;OUTPUT LETTER
	DEC INDEX1
	MIEND
				;DISLAY C IF COCKTAIL
				;
	LDX I,0AC			;DRAW VECTOR TO CLOCK POSITION 
	LDA I,30			; INDICATED BY TBHD
	JSR VGVTR1
	LDY TBHD
	LDA Y,POTXTA
	LDX Y,POTYTA
	LDY I,0C0
	JMP VGVTR 
BADNWS:	.BYTE 46.,56.,52.,54.,30.	;M,R,P,Q,E

	.PAGE
	.SBTTL READ MATH BOX
READMB:
	LDY I,0
	STY VGBRIT
	STY NGAVGZ		;(USEFUL FORDBOOKE ONLY)
				;DONE FOR SQUEEZE PURPOSES
	STA MZLH
	STX MZHL
	STY MZHH
	LDX I,10
	STX MNL
	STX MSZXD
	BEGIN
	DEX
	BMI TOOSLO
	LDA MSTAT
	PLEND
	LDA MYLOW
	LDY MYHIGH
TOOSLO:	RTS
	.PAGE
	.SBTTL	SWITCH TEST
DOPSWI:	JSR VGCNTR		;OPTION SWITCH DISLAY
	LDA I,0
	JSR VGSCA1		;BIG DIGITS
	LDA I,-96./4		;SPACE OVER FOR 1ST OPTION SWITCH
	LDY INOP0		;
	JSR BITS3		;DISPLAY 1ST OPTION SWITCH
	LDY INOP1		;SPACE OVER FOR SECOND OPTION SWITCH
	JSR BITS2		;DISPLAY 2ND SWITCH
	JSR GETOP3		;GET OPTION SWITCH 3
	TAY			;DISPLAY
BITS2:	LDA I,-192./4
BITS3:	LDX I,0F8
GENOPD:	STY SAVEX
	JSR VGVTR1		;GENERAL OPTIONS DISPLAY ROUTINE
	LDX I,7			;ACC=OPTION BYTE
	STX INDEX1
	BEGIN			;LOOP FOR EACH BIT IN BYTE
	ASL SAVEX
	LDA I,0
	ROL
	JSR VGHEX		;DISPLAY 0 OR 1
	DEC INDEX1
	MIEND
	RTS
	.PAGE

	.SBTTL	DISPLAY LIST OF TRIPLE PRECISION #S

DBOOKE:				;SET UP TO DISLAY LIST OF #S
	LDA NGAM2L
	ASL
	STA TEMP0
	LDA NGAM2H
	ROL
	STA TEMP1
	LDA NGAMIL
	CLC
	ADC TEMP0
	STA MXPL
	STA TEMP0
	LDA NGAMIH
	ADC TEMP1
	STA MXPH
	ORA TEMP0
	IFEQ			;DIVIDE BY 0?
	LDA I,1			;YES. MAKE IT 1
	STA MXPL
	ENDIF
	LDA SECOPL
	STA MZLL
	LDA SECOPM		;GET TIME FOR DIVIDEND
	LDX SECOPH
	JSR READMB		;DO DIVIDE
	STA NGAVGL		;RESULTS
	STY NGAVGH
	LAH BOKLIT+1		;BOOKKEEPING LITERALS
	LXL BOKLIT
	JSR VGJSRL
	LDA I,BOOKKS&0FF	;POINT TO 1ST #
	STA INDYLO
	LDA I,BOOKKS/100
	STA INDYHI
	;LDA I,4			;DISPLAY N NUMBERS
	STA INDEX1
;	JSR TPLIST		;DISPLAY LIST (FALL IN)
;	RTS
	.PAGE
	.SBTTL	DISPLAY LIST OF TRIPLE PRECISION #S

;INPUT:INDYLO, HI=BASE ADDRESS OF LIST OF TRIPLE PRECISION #S
;      INDEX1=# OF #'S TO DISLAY -1
;
	BEGIN
	LDY I,0		;SET UP BCD HEX IN TEMP0,1,2
	STY MTEMP
	STY MTEMP+1
	STY MTEMP+2
	STY MTEMP+3
	LDA NY,INDYLO
	STA PXL
	INC INDYLO
	LDA NY,INDYLO
	STA PXL+1
	INC INDYLO
	LDA NY,INDYLO
	STA PXL+2
	INC INDYLO
				;
				;CONVERT PXL(3) FROM HEX TO BCD
				;IN TEMP0(4)
	SED
	LDY I,17
	STY INDEX2
	BEGIN			;LOOP FOR 3*8 BITS
	ROL PXL
	ROL PXL+1
	ROL PXL+2
	LDY I,3
	LDX I,0
	BEGIN			;LOOP FOR EACH BCD BYTE
	LDA X,MTEMP
	ADC X,MTEMP
	STA X,MTEMP
	INX
	DEY
	MIEND
	DEC INDEX2
	MIEND
	CLD
	LDA I,MTEMP
	LDY I,4
	JSR DIGTYS		;OUTPUT #
	LDA I,0D0
	LDX I,-8
	JSR VGVTR1		;POSITION FOR NEXT # DISPLAY
	DEC INDEX1
	MIEND
	RTS
CHKSMB::	.BYTE QCHKSB
	 		;*****IMPORTANT SPACER********
				;PROG MUST BE 5FC BYTES LONG
;NOTE THAT THE FOLLOWING LINES ARE NOT A GOOD THING
;BUT ARE NECESSARY TO KEEP EVERYTHING IN THIS ROM
SNDFRQ	=0DFDC
	.VCTRS SNDFRQ,1010,4040,9090,0FFFF
POTYTA	=0DFE4
POTXTA	=0DFE8
	.VCTRS POTYTA,0C00,1E16
.VCTRS POTXTA,1E20,0C16,0F400,0E2EA,0E2E0,0F4EA,0C00,1E16
	HLL65
	.END
                                                                                                                                                                                                                                                                                                                                   