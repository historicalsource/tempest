	.TITLE	ALSCOR-SCORE MODULE
	.SBTTL	****************************************
	.SBTTL	*					*
	.SBTTL	*MODULE:ALSCOR				*
	.SBTTL	*PROGRAMMER:DFT				*
	.SBTTL	*FUNCTION:SCORE PROCESSING		*
	.SBTTL	*					*
	.SBTTL	*****************************************
	.NLIST
	.INCLUDE ALCOMN
	.LIST
;EXTERNALLY DEFINED SUBROUTINES
	.GLOBL VGVTR1,VGADD,VGSCA1,VGHEXZ,VGJSRL,INBOOM,VGADD2,WRHIIN,SWAPVG,VGRTSL
	.GLOBL BONSCO,VGSCAL

;SUBROUTINES CALLED BY USER
	.GLOBL GETINI,HISCHK,INIINI,INFO,GETCUR,DPRSTA,DIGTYS,COCFLI,GINICO
	.GLOBL LDRDSP,GETDSP,RQRDSP,DSPHOL,INILIT
	.GLOBL DGOVER,DPLPLA,MSGS,D2GAME,KILLER,INITEM,WRBOOK,BOLOUT,DSPCRD
;MESSAGE #'S
	.GLOBL MCMODE,MCMOD1,MCMOD2,MCMOD3,MINSER
	.GLOBL MATARI,MCREDI,VGDOT,VGVTR
	.GLOBL MHIGHS,MPLAYR,MENTER,ENGMSG,MSGLBS,LSYMBL,MPLAY,MPLYR2
	.GLOBL MPRMOV,MPRFIR,VGMSGA,MPRESS,MGAMOV,D70MSK,MRANK
	.GLOBL MRATE,MPRMOV,MPRFIR,MNOVIC,MEXPER
	.GLOBL MLEVEL,MHOLE,MBONUS,MTIME
	.GLOBL MBONPT,M2GAME,HALF
	.GLOBL LEVEL
	.GLOBL LOGINI,BOXPRO,LOGPRO,CLRSCO
	.GLOBL VORLIT,BONDRY
	.GLOBL MBOLIFE,MSPIKE,MAPROA,MSUPZA
	.GLOBL VGSTAT,EABAD
	.GLOBL HISLOC,SCALOC,LIVLOC,SCOLOC
	.GLOBL SCECOU,SCORES,HIILOC,LSYMB0,SCOBUF,SCLEVEL,VORBOX

ITIMHI=60
CBLANK=26.

	.CSECT
;
	.SBTTL INFO DISPLAY-MESSAGES

;INPUT:		MSGREQ: BITS SET TO REQUEST A MSG
;
;OUTPUT:	ACC,X,Y,SAVEX DESTROYED
TCOMOD:	.BYTE MCMODE,MCMOD1,MCMOD2,MCMOD3

INFO:
	LDA I,1
	STA VGSIZE
	JSR VGSCA1
	LDY I,LETCOL		;STANDARD LETTER COLOR
	JSR NWCOLO
	LDA QSTATUS
	IFPL			;ATTRACT?
	LDX I,MGAMOV		;YES. "GAME OVER"
	LDA QFRAME
	AND I,20
	IFEQ
	LDX I,MINSER		;FLASH INSERT COINS
	LDA $$CRDT
	IFNE
	BIT TCMFLG
	IFPL			;2 GAME MINIMUM?
	LDX I,MPRESS		;NO. PRESS START
	ENDIF
	ENDIF
	ENDIF
	JSR MSGS
	JSR VGCNTR
	LDA VGMSGA		;BLANK OUT LEVEL
	STA SCLEVEL
	STA SCLEVEL+2
	JSR DSPCRD		;DISPLAY CREDITS & ATARI
	ENDIF

	.PAGE
	.SBTTL	INFO DISPLAY-LIVES, SCORES

	LDA I,1			;(SCALE)
	LDY I,0			;(PLAYER ID)
	JSR UPSCLI		;PLAYER 1 DATA
	BIT QSTATUS
	IFPL			;ATTRACT?
	LDA RSCORL		;YES. DISPLAY P2 SCORE IF NOT 0
	ORA RSCORM
	ORA RSCORH
	ELSE
	LDA NUMPLA		;NO. GAME MODE. 2 PLAYERS?
	ENDIF
	IFNE
	LDA I,1			;YES. DISPLAY PLAYER 2 DATA
	TAY			;(SCALE 1, PLAYER 1)
	JSR UPSCLI
	ENDIF
	LDA QSTATE
	CMP I,CPLAY		;PLAY STATE?
	IFNE
	LDA I,<<HSCORL+21.>&0FF>+2	;NO. SET UP FOR HI SCORE UPDATE
	STA INDYLO
	LDA I,<<HSCORL+21.>+2>/100
	STA INDYLO+1
	LDX HISLOC		;INDEX INTO TEMPLATE
	JSR NWDIGS
ZATC4V::	LDY I,ZATC4C		;VERIFY CALL TO ATARI LITERAL
	LDA I,0A7
	BEGIN
	EOR Y,ZATC4S
	DEY
	MIEND
	STA QT2
	LDX HIILOC
	LDA I,2			;INITIALS COUNTER
	STA INDEX2
				;
	BEGIN			;UPDATE HIGH INITIALS
	LDY INDEX2		;
	LDA Y,INITAL+<3*NHISCO-3>;GET INITIAL
	ASL
	TAY
	LDA Y,VGMSGA+22.	;GET LSB OF JSRL
	STA X,SCOBUF		;UPDATE TEMPLATE
	INX
	INX
	DEC INDEX2
	MIEND
	ENDIF
	LDAH SCOBUF+1		;INSERT JSRL TO INFO BUFFER
	LXL SCOBUF
	JSR VGJSRL
	LDA ELICNT
	IFMI			;WARNING?
	LDX I,MSPIKE		;YES. AVOID SPIKES
	JSR MSGS
	ENDIF
	.SBTTL STARFIELD MESSAGES
	LDA QSTATE
	CMP I,CNEWV2
	IFEQ
	LDA QSTATUS
	IFMI			;ATTRACT?
	LDX PLAYUP		;NO.
	LDA X,BONUS
	IFNE			;DISPLAY BONUS?
	LDX I,MBONPT		;YES.
	JSR MSGS
	LDY PLAYUP
	LDX Y,BONUS
	JSR BODSPL
	ENDIF
	LDX I,MSUPZA		;"SUPER ZAPPER RECHARGED"
	JSR MSGS
	LDX I,MAPROA
	JSR MSGS		;LEVEL LITERAL
	ENDIF
	ENDIF
	RTS
	.PAGE
	.SBTTL	UPDATE PLAYER'S SCORE, LIVES, SCALE
SCOSOL:	.BYTE LSCORL+2,RSCORL+2	;SCORE LOCATIONS (PLAYER 0,1)
UPSCLI:	LDX QSTATE		;UPDATE SCORE SCALE, LIVES
	CPX I,CPLAY		;Y=PLAYER ID
	STY TEMP2		;ACC=PROPOSED BINARY SCALE
	CPY PLAYUP		;NO. UPDATE LIVES & SCALE (146 MICROSECONDS)
	IFEQ			;PLAYER UP?
	BIT QSTATUS		;YES.
	IFMI			;ATTRACT?
	LDA I,0			;NO. BIG SCORE
	ENDIF
	ENDIF			;Y=PLAYER ID (0 OR 1)
				;ACC=SCALE (0 OR 1)
	ORA I,70
	LDX Y,SCALOC
	STA X,SCOBUF		;UPDATE SCALE
	LDX Y,LIVLOC
	LDA Y,LIVES1
	STA INDEX2
	IFNE
	CPY PLAYUP
	IFEQ			;PLAYER UP BEING DISPLAYED?
	DEC INDEX2		;YES. TAKE 1 LIFE FOR CURSOR
	ENDIF
	ENDIF
	LDY I,1
	BEGIN
	LDA LSYMBL		;DEFAULT LIFE PIC
	CPY INDEX2		;
	IFCS			;NO LIFE?
	IFNE
	LDA LSYMB0		;NO LIFE. BLANK PIC
	ENDIF
	ENDIF
	STA X,SCOBUF
	INX
	INX
	INY
	CPY I,7
	CSEND
	LDY TEMP2
	LDA QSTATE
	CMP I,CPLAY		;IF NOT PLAYING THEN
	BNE ANYWAY		;ALWAYS UPDATE BOTH SCORES
	CPY PLAYUP
	IFEQ			;PLAYER UP?
ANYWAY:	LDX Y,SCOLOC		;YES.
	LDA Y,SCOSOL
	STA INDYLO
	LDA I,0
	STA INDYHI
	.SBTTL	DISPLAY 6 BCD DIGITS W. ZERO SUP.
NWDIGS:				;INDYLOC(2)=LOC OF 3 BYTES
				;CONTAINING 6 BCD DIGITS
				;X=DESTINATION INDEX FROM SCOBUF
	LDY I,2			;BYTE COUNTER
	STY TEMP1
	SEC
	BEGIN			;LOOP FOR EACH BYTE
	PHP
	LDY I,0
	LDA NY,INDYLOC		;DISPLAY HIGH NIBBLE
	LSR
	LSR
	LSR
	LSR
	PLP
	JSR NWHEXZ
	LDA TEMP1
	IFEQ
	CLC			;ALWAYS DISPLAY LAST DIGIT
	ENDIF
	LDY I,0
	LDA NY,INDYLOC		;NOW DO LOW NIBBLE
	JSR NWHEXZ
	DEC INDYLOC
	DEC TEMP1
	MIEND
	ENDIF
	RTS
	.SBTTL	DISPLAY 1 BCD DIGIT WITH ZERO SUPR.
NWHEXZ:
	AND I,0F		;ISOLATE 1 BCD DIGIT
	TAY
	IFNE			;NON ZERO?
	CLC			;YES. CLEAR 0 SUPPRESSOR
	ENDIF
	IFCC			;ZERO SUPPRESS TO ZERO?
	INY			;NO. DISPLAY ZERO
	ENDIF
	PHP
	TYA
	ASL			;*2 TO GET VGMSGA OFFSET
	TAY
	LDA Y,VGMSGA		;GET LSB OF CHARACTER'S JSRL
	STA X,SCOBUF		;UPDATE TEMPLATE
	INX
	INX
	PLP
	RTS
	.PAGE
	.SBTTL	INITIALIZE SCORE/LIVES TEMPLATE
				;
				;INITIALIZE RAM SCORE DISPLAY TEMPLATE
INITEM:				;
	LDX NUMPLA
	BIT QSTATUS
	IFPL			;ATTRACT?
	LDA RSCORL		;YES.
	ORA RSCORM
	ORA RSCORH
	IFNE
	LDX I,1			;DISPLAY PLAYER 2 SCORE IF NOT 0
	ENDIF
	ENDIF
	LDAL SCOBUF
	STA VGLIST
	LDAH SCOBUF+1
	STA VGLIST+1
	LDA X,SCECOU
	TAY
	SEC
	ADC VGLIST
	PHA
	BEGIN			;LOOP FOR EACH BYTE IN SCORE TEMPLATE
	LDA Y,SCORES
	STA NY,VGLIST		;COPY ROM TEMPLATE INTO RAM
	DEY
	EQEND
	LDA Y,SCORES
	STA NY,VGLIST
	LDA QSTATUS
	IFMI			;ATTRACT?
	LDAH SCLEVEL+1
	STA VGLIST+1
	LDAL SCLEVEL
	STA VGLIST		;POINT AT LEVEL JSRL
	LDA CURWAV
	CLC
	ADC I,1
	JSR DSP1HX
	ENDIF
	PLA
	STA VGLIST
	JMP VGRTSL		;PUT RTSL INTO SCORE BUFFER
	.PAGE
	.SBTTL INFO ONLY - GAME OVER & PLAY PLAYER
DPLPLA:

	LDX I,MPLAY		;"PLAY"
	JSR MSGS
	JMP GENPLA
DGOVER: LDA I,30		;SPECIAL COORDINATES
	LDX I,MGAMOV		;"GAME OVER"
	JSR MSGEN3
GENPLA:	JSR DPLRNO		;PLAYER X
	JMP INFO
DPRSTA:	JSR INFO		;DISPLAY ALL INFO
	LDA I,0
	LDX I,MPRESS		;SPECIAL PRESS START IN MIDDLE OF SCREEN
	JMP MSGEN3		;
D2GAME:			;SPECIAL 2 GAME MIN/INSERT COINS IN CENTER
	LDA I,0
	LDX I,M2GAME		;2 GAME MINIMUM
	JSR MSGEN3
	LDA QFRAME
	AND I,1F
	CMP I,10
	IFCC
	LDA I,-20		;FLASH INSERT COINS
	LDX I,MINSER
	JSR MSGEN3
	ENDIF
	JMP INFO
DPLRNO:	LDX I,MPLAYR		;GENERAL "PLAYER X"
	JSR MSGS
DPLRX:
	LDA I,0
	JSR NWSCA1		;BIG PLAYER #
	LDX PLAYUP		;JUST PLAYER #
DPLRXX:	INX
	STX SXL
	LDA I,SXL
	LDY I,1
	JMP DIGTYS
	.PAGE
	.PAGE
	.SBTTL	INFOR DISPLAY-CREDITS,COPYRIGHT
DSPCRD:
	LDA $CMODE		;YES
	AND I,3
	TAX
	LDA X,TCOMOD
	TAX
	JSR MSGS		;DISPLAY COIN MODE
	DEC SECUVY
	LDA OPTIN2
	AND I,OM2GAM
	IFNE
	LDA QFRAME
	AND I,20
	BNE DBOLOU		;FLASH EITHER
	LDX I,M2GAME		;2 GAME MINIMUM
	JSR MSGS
	ELSE
DBOLOU:	JSR BOLOUT		;YES. DISSLAY BONUS LIFE INTERVAL
	ENDIF
ZATC4S::
	LDX I,MATARI
	JSR MSGS
	LDX I,MCREDI
	JSR MSGS		;DISPLAY CREDITS
ZATC4E:
ZATC4C==ZATC4E-ZATC4S
	LDA $$CRDT
	CMP I,28
	IFCS			;MAXIMIZE # CREDITS TO 40.
	LDA I,28
	STA $$CRDT
	ENDIF
	JSR DSP1HX		;OUTPUT 2 DIGITS W. ZERO SUPPRESION
	LDA $CNCT
	IFNE			;PARTIAL CREDITS?
	LDA IHALF+1		;OUTPUT HALF
	LDX IHALF
	JSR VGJSRL
	ENDIF
	RTS
IHALF:	.WORD HALF
	.PAGE
	.SBTTL	HEX TO BCD CONVERSION
;
;CONVERT HEX TO BCD (SINGLE PRECISION)
;INPUT:	ACC=HEX
;OUTPUT:	ACC,TEMP0=BCD
;
HEXBCD:	SED
	STA TEMP0
	LDA I,0
	STA TEMP3
	LDY I,7			;CONVERT HEX TO BCD
	BEGIN
	ASL TEMP0
	LDA TEMP3
	ADC TEMP3
	STA TEMP3
	DEY
	MIEND
	CLD
	STA TEMP0
	RTS
	.PAGE
VGCNTR:			;FAST CENTER
	LDA I,20
	LDX I,80
	JMP VGADD2
	.PAGE
	.SBTTL MESSAGE ROUTINE
;
;BLOCK NAME:	MSGS
;DESCRIPTION:	WILL OUTPUT SPECIFIED MESSAGE TO SPECIFIED LOCATION ON SCREEN
;INPUT PARAMS:	(X)=MESSAGE # * 2
;OUTPUT PARAMS:	NONE
;REGISTERS:	A,X,Y
MSGS:
	LDA AX,MSGLBS+1
MSGEN3:	STX SAVEX
	STA TEMP2
	LDY SAVEX
	LDA NY,LITRAL		;GET LITERAL PTR
	STA INDYLO
	INY
	LDA NY,LITRAL
	STA INDYHI
ZSECL0::	CPX I,MATARI
	IFEQ			;COPYRIGHT MSG?
	LDA VGLIST		;YES. SAVE START LOC
	STA SECUVG
	LDA VGLIST+1
	STA SECUVG+1
	ENDIF
	LDY I,0
	LDA NY,INDYLO		;GET HORIZ POSITION FROM LITERAL
	STA TEMP1
MSGENT: JSR VGCNTR
MSGEN2:	LDA I,0
	STA VGBRIT
	LDA I,1
	STA VGSIZE
	JSR VGSCA1
	LDA TEMP1
	LDX TEMP2
	JSR VGVTR1		;C  POSITION BEAM (USE VGBRIT)
MSGNOP:
	LDY SAVEX		;SET UP PTR TO LITERAL
	LDA NY,LITRAL
	STA INDYLO
	INY
	LDA NY,LITRAL
	STA INDYHI
	LDX SAVEX
	LDA X,MSGLBS
	PHA
	LSR
	LSR
	LSR
	LSR
	TAY
	JSR NWCOLO		;SET NEW COLOR
	PLA
	AND I,0F
	JSR NWSCA1		;SET NEW SCALE
	LDY I,1
	LDA I,0			;C  INIT VGLIST OFFSET
	STA TEMP1
	BEGIN
	LDA NY,INDYLO		;C  GET CHARACTER REPRESENTATION
	STA TEMP2
	AND I,7F
	INY
	STY TEMP3		;	SAVE Y
	TAX
	LDA AX,VGMSGA		;C  GET CORRECT JSRL
	LDY TEMP1
	STA NY,VGLIST
	INY
	LDA AX,VGMSGA+1
	STA NY,VGLIST
	INY
	STY TEMP1		;	SAVE Y
	LDY TEMP3		;C  GET CHARACTER PTR
	BIT TEMP2		;D  IF NOT END OF STRING
	MIEND
	LDY TEMP1		;C  UPDATE VGLIST
	DEY
	JMP VGADD
;NO VERTICAL POSITIONING (Y)
MSGFOL: STX SAVEX		;INPUT: X=MSG#*2
	STA TEMP1		;       ACC=X OFFSET
	LDA I,0
	STA TEMP2
	BEQ MSGEN2		;ALWAYS
	.PAGE
	.PAGE

	.SBTTL	INITIALIZE HIGH SCORE TABLES

	.SBTTL	NEW GAME OPTION SETUP & CHECK
INICHK::
	JSR GAMSTA		;CHECK FOR GAME PLAY OPTION CHANGE
	LDA EABAD
	AND I,03
	IFNE			;CHANGES?
				;YES. REINITIALIZE SCORES & INITIALS
INIINI:	JSR GAMSTA		;CHECK FOR GAME PLAY OPTION CHANGES
INIIN2:	LDA I,NHISCO		;START AT 8 RANK GAMES
	STA NGAMES
	LDA HSCORL+<3*NHISCO>-3
	ORA HSCORM+<3*NHISCO>-3
	ORA HSCORH+<3*NHISCO>-3
	IFEQ			;HI SCORES CLEARED?
	JSR INDUCE		;YES. INDUCE COMPLETE INITIALIZATION
	ENDIF
				;
				;INITIALIZE INITIALS
				;
	LDX I,<3*NHISCO>-1	;DEFAULT TO BAD INITIALS
	LDA EABAD
	AND I,1
	IFEQ			;INITIALS VALID?
	LDX I,<3*NHISCO>-1-9	;YES. DON'T WRITE OVER TOP 3
	ENDIF
	BEGIN			;LOOP FOR EACH INITIAL
	LDA X,SCOINI
	STA X,INITAL
	DEX
	MIEND
				;
				;INITIALIZE HI SCORES
				;
	LDX I,<3*NHISCO>-1	;DEFAULT TO BAD HI SCORE
	LDA EABAD
	AND I,2
	IFEQ			;HI SCORES VALID?
	LDX I,<3*NHISCO>-1-9	;YES. DON'T WRITE OVER TOP 3
	ENDIF
	BEGIN			;LOOP FOR EACH DIGIT PAIR
	LDA I,1
	STA X,HSCORL
	DEX
	MIEND
	LDA EABAD
	AND I,3
	IFNE			;REINITIALIZING?
	LDA OPTIN2		;YES. SET UP GAME PLAY OPTIONS
	AND I,0F8
	STA GAMOP1
	LDA OPTIN3
	AND I,3
	STA GAMOP3
	ENDIF
				;
	LDA EABAD		;CLEAR BAD READ FLAG
	AND I,0FC
	STA EABAD
	ENDIF
	RTS
	.MACRO .ASCVG .STRING
	.NCHR ..N,<.STRING>
	.IRPC ..C,<.STRING>
	.IF EQ,''..C-^H20
	..X=26.
	.IFF
	..X=''..C-^H41
	.ENDC
	.BYTE ..X
	.ENDR
	.ENDM
SCOINI:
	.ASCVG	<HEBPJMLDSTFDHPMRRRSEDDJE>
	.SBTTL	CHECK FOR GAME PLAY OPTION CHANGE
GAMSTA::
	JSR INILIT		;READ OPTIONS
	LDA OPTIN2
	AND I,0F8
	CMP GAMOP1
	IFEQ
	LDA OPTIN3
	AND I,03
	CMP GAMOP3
	ENDIF
	IFNE			;NEW GAME PLAY OPTIONS?
INDUCE:	LDA EABAD		;YES. INDUCE REINITIALIZATION
	ORA I,3			;OF SCORES & INITIALS
	STA EABAD
	ENDIF
	RTS
	.PAGE
	.SBTTL	HISCHK:HIGH SCORE DETECTION
;EXTERNAL ENTRY POINT
HISCHK:	LDA QSTATUS
	AND I,^C<MGTMOD>
	STA QSTATUS			;OUT OF GAME TIME MODE

	LDA OPTIN1
	AND I,43
	CMP I,40
	IFEQ			;SCALES MODE?
	JSR CLRSCO		;YES. CLEAR SCORES
	ENDIF
	JSR WRBOOK		;WRITE OUT BOOKKEEPING INFO
	LDA I,0
	STA RANKS+1		;NO RANK FOR PLAYER 2 IN CASE 1 PLAY OR GAME
	LDX NUMPLA
	IFNE			;2 PLAYER GAME?
	LDX I,3			;YES. START WITH PLAYER 2
	ENDIF
	BEGIN			;LOOP FOR EACH PLAYER (2 THEN 1)
	LDA X,LSCORH
	STA TEMP3
	LDA X,LSCORM
	STA TEMP4
	LDA X,LSCORL
	STA TEMPX		;SET UP PLAYER'S SCORE
	TXA
	AND I,1
	STA SAVEY
	LDA I,0
	STA TEMP2
	LDA I,CBLANK
	STA TEMP1
	STA TEMP0		;SET UP INITIALS (A BLANK BLANK)
	LDA I,0
	STA TIMHIS		;INITIALIZE RANK
	LDY I,253.
	BEGIN			;LOOP FOR EACH SCORE IN RANK TABLE (HI TO LO)
				;UNTIL PLAYERS SCORE > SCORE IN TABLE
	LDA Y,HRANKH
	CMP TEMP3
	IFEQ			;COMPARE SCORE TO TABLE ENTRY
	LDA Y,HRANKM
	CMP TEMP4
	IFEQ
	CPY I,82.
	IFCS			;PRECISION?
	LDA Y,HRANKL		;TRIPLE
	CMP TEMPX
	ELSE
	SEC			;DOUBLE
	ENDIF
	ENDIF
	ENDIF
	IFCC			;PLAYER'S SCORE > TABLE ENTRY?
	BEGIN			;LOOP FROM NEW ENTRY TO BOTTOM OF TABLE
	CPY I,232.
	IFCS			;HI SCORE TABLE?
	LDA TEMP0		;YES. MOVE INITIALS DOWN
	LDX Y,INITAL-232.
	STA Y,INITAL-232.
	STX TEMP0
	LDA TEMP1
	LDX Y,INITAL+1-232.
	STA Y,INITAL+1-232.
	STX TEMP1
	LDA TEMP2
	LDX Y,INITAL+2-232.
	STA Y,INITAL+2-232.
	STX TEMP2
	ENDIF
	LDA TEMP4		;MOVE SCORES DOWN
	LDX Y,HRANKM
	STA Y,HRANKM
	STX TEMP4
	LDA TEMP3
	LDX Y,HRANKH
	STA Y,HRANKH
	STX TEMP3
	CPY I,82.
	IFCS			;TRIPLE PRECISION?
	LDA TEMPX
	LDX Y,HRANKL
	STA Y,HRANKL
	STX TEMPX
	ENDIF
	CPY I,85.		;TRIPLE PRECISION?
	IFCS
	DEY			;YES.
	ENDIF
	DEY
	DEY
	EQEND
	LDY I,2			;ABORT OUTER LOOP
	ENDIF
	INC TIMHIS		;UPDATE RANK
	CPY I,85.
	IFCS			;TRIPLE PRECISION?
	DEY			;YES.
	ENDIF
	DEY
	DEY
	EQEND
	LDX SAVEY
	LDA TIMHIS
	STA X,RANKS		;UPDATE PLAYER'S RANK
	DEX
	MIEND
	LDA RANKS+1
	CMP RANKS
	IFCS			;BOTH RANKS SAME?
	CMP I,NRANKS		;YES. MAKE PLAYER 2 LOW
	IFCC
	INC RANKS+1
	ENDIF
	ENDIF
	LDA PLAYUP		;SET UP PLAYER ORDER OF FINISH
	EOR I,1			;LAST PLAYER UP IN D0,D1
	ASL			;1ST PLAYER TO DIE IN D2,D3
	ASL
	ORA PLAYUP
	ADC I,5
	STA FLGNHI
;JSR INTLDR			;GO SEE IF ANYBODY MADE IT
	.PAGE
	.SBTTL	HISCORE INITIALS PREP
INTLDR:	LDY I,CNOTFOU		;DEFAULT IS FAILURE
	LDA FLGNHI
	IFNE			;MORE HI SCORES?
	AND I,3		;YES.
	STA PLAYUP		;SET UP PLAYER ID
	DEC PLAYUP
	LSR FLGNHI
	LSR FLGNHI
	LDX PLAYUP
	LDA X,RANKS
	IFNE
	CMP I,9
	IFCC			;PLAYER GET HI SCORE?
	ASL			;YES.
	CLC
	ADC X,RANKS
	EOR I,0FF
	SEC
	SBC I,232.-3
	STA TBLIND		;SET INDEX TO PT TO MS LETTER
	JSR COCFLI		;COCKTAIL FLIP
	LDA I,ITIMHI
	STA TIMHIS		;SET TIMER
	LDA I,0			;CLEAR SWITCHES
	STA SWFINA		;
	STA TBHD
	LDA I,2
	STA ININDX		;SET UP INITIAL COUNTER
	JSR INBOOM		;INITIALIZE BOOM STATE (SUCCESS)
	LDY I,CBOOM
	STY QSTATE
	RTS
	ENDIF
	ENDIF
	JMP INTLDR		;TRY AGAIN
	ENDIF
	STY QSTATE
	RTS
	.PAGE
	.SBTTL	GETINI:GET INITIALS
;ENTERNAL ENTRY POINT
GETINI:
	LDA I,CDGETI		;GET INIT DISPLAY STATE
	STA QDSTATE
	LDA QFRAME		;
	AND I,1F
	IFEQ			;TIME TO UPDATE TIMER?
	DEC TIMHIS		;YES
	IFEQ			;TIME UP?
	LDY I,CNOTFOU		;YES. ABORT
	STY QSTATE
	RTS
	ENDIF
	ENDIF
	LDX TBLIND
	LDA X,INITAL		;GET LETTER BEING CHANGED
	JSR GINICO		;CHANGE IT
	TAY
	IFMI
	LDA I,26.
	ELSE
	CMP I,27.
	IFCS
	LDA I,0
	ENDIF
	ENDIF
	LDX TBLIND
	STA X,INITAL		;SAVE IT
	LDA SWFINA
	AND I,MFIRE!MSUZA
	TAY
	LDA SWFINA
	AND I,^C<MFIRE!MSUZA!MFAKE>
	STA SWFINA
	TYA
	IFNE			;USE THIS LETTER?
				;YES

	DEC TBLIND		;UPDATE INITIAL INDEX
	DEC ININDX
	IFMI			;ALL DONE WITH PLAYER?
	LDX PLAYUP		;YES.
	LDA X,RANKS
	CMP I,4
	IFCC			;SAVE IN EAROM?
	JSR WRHIIN		;YES. UPDATE EAROM
	ENDIF
	JSR INTLDR		;YES. SEE IF OTHER PLAYER GO ON.
	ELSE
	DEX
	LDA I,0			;START AT A
	STA X,INITAL
	ENDIF
	ENDIF
	RTS
	.PAGE
	.SBTTL USER SUBROUTINES FOR I/O
GINICO:	PHA			;RETURN WITH ACC INCD OR DECD
	LDA TBHD			;
	ASL			;SCALE POT READING
	ASL			;
	ASL			;
	CLC			;
	ADC CURSPO
	STA CURSPO
	PLA			;GET CURRENT INITIAL
	LDY TBHD
	IFPL			;+DIRECTION?
	ADC I,0			;YES. ADD IN DIRECTION+CARRY
	ELSE
	ADC I,0FF		;NO. ADD IN DIRECTION+CARRY
	ENDIF
	LDY I,0
	STY TBHD
	RTS
;
	.PAGE
	.SBTTL	USER SUBROUTINES FOR IO
	.SBTTL	GET INITIALS DISPLAY
GETDSP:	JSR INFO		;DISPLAY SCORE & LIVES INFO
	LDA I,0C0
	LDX I,MPLAYR		;PLAYER
	JSR MSGEN3
	DEC SECUVY
	JSR DPLRX		;PLAYER #
	LDX I,MENTER		;ENTER YOUR INITIALS
	JSR MSGS
	LDA I,0A6
	LDX I,MPRMOV		;PRESS MOVE
	JSR MSGEN3
ZATC3S::
	LDA I,09C
	LDX I,MPRFIR		;PRESS FIRE
	JSR MSGEN3

	LDX I,MATARI
	JSR MSGS
	LDA TBLIND
	SEC
	SBC ININDX		;SET GLOW CODE
ZATC3E:
ZATC3C==ZATC3E-ZATC3S
	JMP LDROUT		;DISPLAY LADDER
	.PAGE

	.SBTTL	DISPLAY HIGH SCORE LADDER
LDRDSP:
	JSR INFO		;DISPLAY SCORE & LIVES INFO
;
;TEST BOTH POKEY'S FOR RANDOM NUMBERS - SEQUENTIALS SHOULD
;HAVE MATCHING NIBBLES
;OUTPUT-ACC=0 IF ALL IS WELL
;
ZPONTS::
	SEI
	LDA RANDOM
	LDY RANDOM
	STY TEMP0
	LSR
	LSR
	LSR
	LSR
	EOR TEMP0
	STA TEMP0
	LDA RANDO2
	LDY RANDO2
	CLI
	EOR TEMP0
	AND I,0F0
	EOR TEMP0
	STA TEMP0
	TYA
	ASL
	ASL
	ASL
	ASL
	EOR TEMP0
	STA QT5			;NO. KILL STACK
	JSR RNKDSP		;DISPLAY RANKS
	LDA I,-1		;NO GLOW
	.SBTTL DISPLAY HI SCORE LADDER
LDROUT:	STA SZL			;GLOW CODE (-1=NONE;ELSE=INITIALS TO GLOW)
	LDX I,MHIGHS		;HIGH SCORES
	JSR MSGS
	LDA I,1
	STA SXL			;INITIAL RANK
	JSR NWSCA1
	LDA I,40.
	STA TEMP3		;INITIAL HEIGHT
	LDX I,3*<NHISCO-1>
	STX INDEX1
	BEGIN			;LOOP FOR EACH SET OF INITIALS
	JSR VGCNTR
	LDA I,0
	STA VGBRIT
	LDA TEMP3		;Y COORD
	TAX
	SEC
	SBC I,10.
	STA TEMP3
	LDA I,0D0		;X COORD
	JSR VGVTR1		;POSITION BEAM
	LDY I,BLULET		;DEFAULT BLUE
	LDA SZL
	CMP INDEX1
	IFEQ			;SPECIAL INITIALS?
	LDY I,WHITE		;YES. MAKE THEM GLOW WHITE
	ENDIF
	JSR NWCOLO
	LDA I,SXL		;OUTPUT RANK
	LDY I,1
	JSR DIGTYS
	LDA I,0A0
	JSR VGDOT
	LDA I,0
	STA VGBRIT
	TAX
	LDA I,8
	JSR VGVTR1		;SPACE
	INC SXL
	LDA INDEX1
	JSR OUTINI		;OUTPUT INITIALS
	LDX I,0
	LDA I,8
	JSR VGVTR1		;LEAVE SPACE
	LDX INDEX1
	LDA X,HSCORL
	STA PXL
	LDA X,HSCORM
	STA PYL
	LDA X,HSCORH
	STA PZL
	LDA I,PXL
	LDY I,3
	JSR DIGTYS		;OUTPUT SCORE
	DEC INDEX1
	DEC INDEX1
	DEC INDEX1
	MIEND
	RTS
	.SBTTL	DISPLAY BONUS INTERVAL
BOLOUT:
	LDA BLIFIN
	IFNE			;BONUS LIFE?
				;YES
	STA PZL			;SET INTERVAL
	LDX I,MBOLIFE
	JSR MSGS		;BONUS LIFE EVERY
	LDA I,0
	STA PXL
	STA PYL
	LDA I,PXL
	LDY I,3
	JSR DIGTYS		;OUTPUT 10K & 20K
	ENDIF
	.GLOBL ZATLIC,ZATLIS
ZATLIV::	CLC
	LDY I,ZATLIC
	LDA I,085
	BEGIN
	ADC Y,ZATLIS
	DEY
	MIEND
	STA QT1			;VERIFY ATARI LITERAL
	RTS
	.PAGE
	.SBTTL	UTILITY-DISPLAY 1 SET OF INITIALS
;OUTINI	INPUT:ACC=INDEX INTO INITAL OF INITIALS
;
OUTCUR:	LDA TBLIND
	SEC
	SBC ININDX
OUTINI:	CLC
	ADC I,2
	STA INDEX2
	LDY I,0
	LDA I,2
	STA INDEX3
	BEGIN			;LOOP FOR EACH OF 3 INITIALS
	LDX INDEX2
	LDA X,INITAL
	CMP I,1E
	IFCS			;VALID?
	LDA I,26.		;NO. SUBSTITUTE SPACE
	ENDIF
	ASL
	TAX
	LDA X,VGMSGA+22.	;CONVERT INITIAL(0-26.)TO INDEX
	STA NY,VGLIST
	INY
	LDA X,VGMSGA+1+22.
	STA NY,VGLIST
	INY
	DEC INDEX2		;UPDATE COUNT OF VG BYTES
	DEC INDEX3
	MIEND
	DEY
	JMP VGADD		;UPDATE VGLIST POINTER

	.PAGE
	.SBTTL RANK DISPLAY
RNKDSP:
	LDA RANKS
	ORA RANKS+1
	IFNE			;VALID RANKING?
	LDX I,MRANK		;YES
	JSR MSGS		;"RANKING..." MSG OUTPUT
	LDA I,99.
	JSR ONERNK
	LDX I,0			;PLAYER 1 RANK
	JSR PL1RNK
	LDX I,1			;PLAYER 2 RANK
				;
PL1RNK:
	LDA X,RANKS
	IFNE			;VALID RANK?
	PHA			;YES.
	STX TEMPX
	LDY I,RED
	JSR NWCOLO		;GREEN DIGIT
	JSR VGCNTR		;CENTER BEAM
	LDA I,-30
	LDY TEMPX
	LDX Y,HITRNK
	JSR VGVTR1		;POSITION BEAM
	PLA
	JSR ONERNK		;OUTPUT RANK
	LDA I,0A0
	JSR VGDOT		;DOT
	LDA I,10
	LDX I,MPLYR2		;PLAYER
	JSR MSGFOL
	LDX TEMPX
	JSR DPLRXX		;PLAYER #
	ENDIF
	ENDIF
	RTS
HITRNK:	.BYTE -40,-50		;HEIGHT FOR RANK DISPLAYS
ONERNK:	CMP I,NRANKS
	IFCS			;MAX AT NRANKS
	LDA I,NRANKS
	ENDIF
DSP1HX:	JSR HEXBCD		;CONVERT TO BCD
	LDA I,TEMP0
	LDY I,1
	JMP DIGTYS		;DISPLAY RANK
	.PAGE
	.SBTTL	DISPLAY PLAYER RATING REQUEST
	
RQRDSP:
	JSR COCFLI		;COCKTAIL FLIP
	DEC SECUVY
	LDY I,RED		;SET LETTER COLOR
	JSR NWCOLO
	LDA I,1
	STA VGSIZE
	JSR VGSCA1
ZATC2S::
	LDX I,MATARI
	LDA I,60
	JSR MSGEN3
	JSR DPLRNO		;PLAYER X
ZATC2E:
ZATC2C==ZATC2E-ZATC2S
	LDX I,ENDMSG-MSGTAB-1
	STX INDEX1
	BEGIN			;LOOP FOR EACH MESSAGE
	LDY INDEX1
	LDX Y,MSGTAB		;MESSAGE ID
	JSR MSGS		;DISPLAY MESSAGE
	DEC INDEX1
	MIEND
;
;IF CURSOR IS AT EDGE OF VISIBLE SCREEN, TRY TO SCROLL
;
	LDA CURSL1		;ACTUAL CURSOR POSITION
	SEC
	SBC LEFSID
	IFMI
	DEC LEFSID
	DEC RITSID
	ELSE
	IFEQ			;AT LEFT SIDE OF VISIBLE SCREEN?
	DEC RITSID		;YES. TRY TO SCROLL LEFT
	DEC LEFSID
	IFMI			;VALID?
	INC LEFSID		;NO. UNSCROLL
	INC RITSID
	ENDIF
	ELSE
	LDA RITSID		;NO.
	CMP HIRATE
	BEQ YES			;DISPLAY NEXT ONE
	IFCC			;AT RIGHT SIDE OF VISIBLE SCREEN?
YES:	SEC			;YES.
	SBC CURSL1
	IFEQ
	CLC
	ENDIF
	IFCC			;SCROLL RIGHT VALID?
	INC LEFSID		;YES. SCROLL
	INC RITSID
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	LDA RITSID
	STA INDEX4
	LDX I,4
	STX INDEX1
	BEGIN
	LDY I,GREEN
	JSR NWCOLO
	LDA I,0
	STA VGBRIT
	JSR VGCNTR		;DISPLAY LEVEL #
	LDX I,-40.
	LDY INDEX1
	LDA Y,XPOTAB
	CLC
	ADC I,0F8
	JSR VGVTR1		;-GET INTO POSITION
	LDX INDEX4
	LDY X,LEVEL
	CPY I,99.
	IFCC			;IN RANGE?
	INY			;YES
	TYA
	JSR DSP1HX		;-OUTPUT LEVEL #
	LDY I,RED
	JSR NWCOLO
	JSR VGCNTR		;DISPLAY BONUS POINTS
	LDX I,-70.
	LDY INDEX1
	LDA Y,XPOTAB
	CLC
	ADC I,0EC
	JSR VGVTR1		;-GET INTO POSITION
	LDX INDEX4
	JSR BODSPL		;DISPLAY BONUS
				;-OUTPUT POINTS
	JSR VGCNTR
	LDX I,0CC
	LDY INDEX1
	LDA Y,XPOTAB
	CLC
	ADC I,0
	JSR VGVTR1		;POSITION BEAM
	LDX INDEX4		;DISPLAY HOLE
	LDA X,LEVEL
	JSR DSPHOL
	ENDIF
	DEC INDEX4
	DEC INDEX1
	MIEND
				;DISPLAY TIME LEFT
	LDA I,0
	STA VGBRIT
	JSR VGCNTR
	LDX I,MTIME		;"TIME"
	JSR MSGS
	LDA I,QTMPAUS
	LDY I,1
	JSR DIGTYS		;-OUTPUT SECONDS
				;DISPLAY CURSOR
				;DISPLAY BOX AROUND LEVEL
				;
	LDY I,WHITE
	JSR NWCOLO		;CURSOR COLOR
	JSR VGCNTR		;
	LDX I,0B8		;
	JSR GETCUR		;GET CURSOR POS.
	SEC			;MAKE IT RELATIVE
	SBC LEFSID
	TAY
	LDA Y,XPOTAB
	SEC
	SBC I,16
	JSR VGVTR1		;POSITION BEAM AT UPPER RIGHT CORNER OF LEVEL
	LDA I,0E0
	STA VGBRIT		;BEAM ON
	LDX I,0		;BALL INTO DRAW BOX
;DRAW BOX: X=INDEX INTO BOXTAB OF 1ST SET OF OFFSETS IN BOX
;
;
DOBOX:	STX INDEX2
	LDY I,3
	STY INDEX1
	BEGIN			;LOOP FOR EACH SIDE OF BOX
	LDY INDEX2
	LDA Y,BOXTAB
	TAX
	INY
	LDA Y,BOXTAB
	INY
	STY INDEX2
	JSR VGVTR1
	DEC INDEX1
	MIEND
	RTS

XPOTAB:	.BYTE 0BE,0E3,09,30,58
MSGTAB:	.BYTE MRATE,MPRMOV,MPRFIR	;RATE MESSAGES
	.BYTE MNOVIC,MEXPER,MLEVEL
	.BYTE MHOLE,MBONUS
ENDMSG:
BOXTAB: .BYTE 0, 26
	.BYTE 28, 0
	.BYTE 0,-26
	.BYTE -28,0
GETCUR:
	LDA CURSL1		;CURRENT POSITION
	JSR GINICO		;UPDATE POSITION
	TAY
	IFMI			;APPLY LIMITS
	LDA I,0			;MIN
	ELSE
	CMP HIRATE
	IFCS
	LDA HIRATE		;MAX
	ENDIF
	ENDIF
	STA CURSL1		;NEW POSITION
	TAY
	RTS
BODSPL:	TXA
	JSR BONSCO		;SET UP BONUS SCORE
	LDA I,TEMP0
	LDY I,3
	JMP DIGTYS
				;INPUT: Y=NEW COLOR
NWCOLO:	CPY COLOR		;CHANGE COLOR IF NECESSARY
	IFNE
	STY COLOR
	LDA I,8			;CHANGE COLOR FLAG
	JMP VGSTAT
	ENDIF
	RTS
				;INPUT: ACC=NEW BINARY SCALE
NWSCA1:	CMP VGSIZE
	IFNE			;CHANGE BINARY SCALE IF NECESSARY
	STA VGSIZE
	JMP VGSCA1
	ENDIF
	RTS
	.PAGE
	.SBTTL	LOGO INITIALIZATION
LOGINI:
	LDA I,CPAUSE		;GAME STATE:PAUSE FOR ENTIRE LOGO
	STA QSTATE
	LDA I,CNEWGA		;THEN GO TO GAME
	STA QNXTST
	LDA I,0DF
	STA QTMPAUS
	LDA I,CDBOXP		;FIRST DO SHRINKING BOX RAINBOW
	STA QDSTATE
	LDA I,19			;STARTING  CLOSE
	STA FARY
	LDA I,18
	STA NEARY
	RTS
;
FARINC	=8
NERINC	=8
	.SBTTL	LOGO-SHRINKING BOX RAINBOW
BOXPRO:
	LDAH VORBOX+1
	LXL VORBOX
				;SET PIC TO USE
	JSR SCARNG		;DRAW RAINBOW OF BOX
	LDA FARY
	CMP I,0A0
	IFCC			;FAR PT. PAST DESTINATION?
	ADC I,14		;NO. MOVE IT FARTHER
	STA FARY
	ENDIF
	CMP I,50
	IFCS			;FOR PT. PAST PT. WHERE NEAR PT. MOVES?
	LDA NEARY		;YES. MOVE NEAR PT. FARTHER
	CLC
	ADC I,FARINC
	STA NEARY
	CMP FARY
	IFCS			;NEAR PT. PAST FAR PT.?
	LDA I,0A0		;YES.
	STA NEARY
	LDA I,CDLOGP		;NOW DO GROWING LOGO
	STA QDSTATE
	ENDIF
	ENDIF
	RTS
	.SBTTL	LOGO - LOGO RAINBOW
LOGPRO:				;APPROACHING LOGO PROCESS
	LDAH VORLIT+1
	LXL VORLIT
				;SET PICTURE TO USE
	JSR SCARNG		;DRAW RAINBOW OF LOGO
	LDA NEARY
	CMP I,30
	IFCS			;NEAR PT. PAST DESTINATION?
	SBC I,1			;NO. BRING IT CLOSER
	STA NEARY
	ENDIF
	CMP I,80
	IFCC			;NEAR PT. PAST PT. WHERE FAR PT. MOVES?
	LDA FARY		;YES. BRING FAR PT. CLOSER
	SEC
	SBC I,1
	CMP NEARY
	IFCC			;FAR PT PAST NEAR?
	LDA NEARY		;YES. SET AT NEAR PT
	ENDIF
	STA FARY
	ENDIF
	RTS
	.SBTTL	LOGO RAINBOW BUILDER
SCARNG:
	STA PYL			;POINTER TO PICTURE SUBR
	STX PXL
	LDA NEARY
	STA INDEX1
	DEC SECUVY
	BEGIN			;LOOP FROM FAR PT. TO NEAR PT.
	LDA INDEX1		;SCALE IS A FUNCTION OF DISTANCE
	ASL
	ASL
	AND I,7F		;LINEAR SCALE
	TAY
	LDA INDEX1
	LSR
	LSR
	LSR
	LSR
	LSR			;BINARY SCALE
	JSR VGSCAL
	LDA INDEX1		;COLOR DEPENDS ON POSITION IN RAINBOW
	CMP NEARY
	IFEQ			;LEADING PT.?
	LDA I,WHITE		;YES. MAKE IT MOST VISIBLE
	ELSE
	LSR
	LSR
	LSR
	NOP
	AND I,7			;NO FOLLOWERS
	CMP I,7
	IFEQ
	LDA I,RED		;USE RED FOR BLACK
	ENDIF
	ENDIF
	TAY
	LDA I,68
	JSR VGSTAT		;SET COLOR
	LDA PYL
	LDX PXL
	JSR VGJSRL		;DRAW PICTURE AT PT.
ZATC1S::
	LDA INDEX1
	CLC
	ADC I,2
	STA INDEX1
	CMP FARY
	CSEND			;EXIT IF PAST NEAR PT.
	LDX I,MATARI
	LDA I,0D0
	JSR MSGEN3		;DISPLAY COPYRIGHT LOGO
	LDAH KILLER+1
	LXL KILLER
ZATC1E:
	JMP VGJSRL		;DEFEAT BEAM KILLER
ZATC1C==ZATC1E-ZATC1S

	HLL65
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                