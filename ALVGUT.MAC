	.TITLE	ALVGUT
	.SBTTL VGUT-VECTOR GENERATOR UTILITIES
	.NLIST
	.INCLUDE ALCOMN
	.LIST

;ZERO PAGE GLOBALS

	.GLOBL XCOMP,VGLIST,VGBRIT

;EXTERNAL ENTRY POINTS

	.GLOBL	VGMSGA

;ENTRY POINTS

	.GLOBL VGADD,VGHALT,VGHEX,VGHEXZ,VGVTR
	.GLOBL VGJSRL,VGADD2,VGVTR1,VGVTR2,VGSTA1,VGADD3
	.GLOBL VGRTSL,VGVCTR,VGCNTR,VGSTAT,VGSCAL,VGSCA1,DIGTYS,DIGITS


	.SBTTL*********************************************
	.SBTTL*
	.SBTTL*PROGRAMMER:  LOGG/THEURER
	.SBTTL*
	.SBTTL*CHECKER:
	.SBTTL*
	.SBTTL*********************************************
	.SBTTL VGUT - VECTOR GENERATOR UTILITY SUBROUTINES
;
;DATE INITIATED:	10-OCT-79
;PROJECT CHARGE #:	23803
;
;DISK #:	 	105, B46
;
;HARWARE REQUIREMENTS:	ANALOG AUTO-NORMALIZING VECTOR GENERATOR
;
;MEMORY REQUIREMENTS:	
;	NOT APPLICABLE - SUBROUTINE
;
;INTERRUPT REQUIREMENTS:
;	NOT APPLICABLE - SUBROUTINE
;
;ASSEMBLY COMMAND STRING:
;	R MAC65
;	DX1:VGUT,DK1:VGUT=DX1:VGUT/C
;
;LINK COMMAND STRING:
;	NOT APPLICABLE - SUBROUTINE
;
;PROGRAM DESCRIPTION:
;	A SET OF UTILITY ROUTINES FOR GENERATING
;	VECTORS USING THE ANALOG AUTO-NORMALIZING VECTOR GENERATOR.
;ZERO PAGE GLOBALS REQUIRED:
;
;	VGLIST:	THIS 2 BYTE VARIABLE CONTAINS THE CURRENT VECTOR GENERATOR RAM
;		ADDRESS USED TO BUILD INSTRUCTIONS FOR THE VECTOR GENERATOR.
;		IT SHOULD BE INITIALIZED BEFORE CALLING ANY OF THESE ROUTINES.
;
;	XCOMP:	THIS 4 BYTE VARIABLE IS USED TO CONTAIN THE X (LSB,MSB) COMPONENT
;		AND Y (LSB,MSB) COMPONENT USED IN SEVERAL OF THE VECTOR INSTRUC-
;		TIONS.  FOR THE VGVCTR ROUTINE THESE FIELDS ARE SIGNED 2'S
;		COMPLEMENT NUMBERS.
;
;	VGBRIT: THIS VARIABLE IS USED BY VGVCTR AND VGSTAT TO GENERATE VECTORS
;		WITH THE GIVEN BRIGHTNESS. IT'S VALUES ARE 0,10,20,30,
;		40,...F0 WHERE 0 IS OFF AND F0 IS MAX BRIGHTNESS.
;		IN THE VECTOR INSTRUCTIONS ONLY THE UPPER 3 BITS IS USED
;		IF Z=1 IN THE VECTOR INSTRUCTIONS THEN THE LAST NON-ZERO
;		Z IS USED.
;
;
;EXTERNAL ENTRY POINTS REQUIRED:
;
;	VGMSGA:	THIS ENTRY POINT PROVIDES JSRL INSTRUCTIONS TO THE CHAR.X
;		ROUTINES.  THIS ENTRY POINT IS PROVIDED BY VECAN.MAC.
;
;THESE ROUTINES WERE WRITTEN TO PROVIDE PROGRAMMERS USING LYLE RAIN'S VECTOR
;GENERATOR A MEANS OF:
;	1)	DYNAMICALLY GENERATING VECTORS JUST AS VECMAC ALLOWS STATIC
;		GENERATION OF VECTORS.
;	2)	DISPLAY NUMBERS WITH OR WITHOUT ZERO SUPPRESSION.
;
;EXAMPLE 1:
;
;	LDA I,VECRAM&0FF	;INITIALIZE VECTOR RAM POINTER
;	STA VGLIST
;	LDA I,VECRAM/100
;	STA VGLIST+1
;	JSR CENTER		;CENTER BEAM IN MIDDLE OF SCREEN.
;	LDA I,256./4		;POSITION BEAM AT (256,256)
;	LDX I,256./4
;	JSR VGSVTR
;	ETC....
;
;
;EXAMPLE 2:
;
;	LDA PLAYER		;DISPLAY PLAYER NUMBER
;	JSR VGHEX		;REMEMBER BEAM MUST BE POSITIONED CORRECTLY
;	LDA SCORE1		;MSB OF SCORE
;	LSR
;	LSR
;	LSR
;	LSR
;	SEC
;	JSR VGHEXZ		;DISPLAY UPPER DIGIT WITH ZERO SUPPRESSION
;	LDA SCORE1
;	JSR VGHEXZ		;DISPLAY SECOND DIGIT WITH ZERO SUPPRESSION
;	LDA SCORE0		;LSB OF SCORE
;	PHP			;SAVE ZERO SUPPRESSION FLAG
;	LSR
;	LSR
;	LSR
;	LSR
;	PLP
;	JSR VGHEXZ		;DISPLAY THIRD DIGIT WITH ZERO SUPPRESSION
;	LDA SCORE0
;	JSR VGHEX		;DISPLAY LAST DIGIT
;	ETC....
	

	.CSECT
	.SBTTL VGRTSL - ADD RTSL TO VECTOR LIST
;VGRTSL - ADD RTSL TO VECTOR LIST
;
;ENTRY	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;USES	A,Y,(VGLIST,VGLIST+1)

VGRTSL:	LDA I,0C0		;DXXX IS RTSL
	BNE VGHAL1		;ALWASY


	.SBTTL VGHALT - CENTER AND HALT VECTOR GENERATOR
;VHALT - CENTER AND HALT VECTOR GENERATOR
;
;ENTRY	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;USES	A,X,Y,(VGLIST,VGLIST+1)

VGHALT:	JSR VGCNTR		;CENTER FIRST
	LDA I,20		;BXXX IS HALT
VGHAL1:	LDY I,0
	STA NY,VGLIST
	JMP VGWAI1		;ADD LAST BYTE


	.SBTTL VGHEXZ - DISPLAY DIGIT WITH ZERO SUPPRESSION
;VGHEXZ - DISPLAY DIGIT WITH ZERO SUPPRESSION
;
;THIS ROUTINE WILL DISPLAY A DIGIT USING THE DEFAULT CHARACTER SIZE.
;NO ATTEMPT IS MADE TO USE THE VARIABLE VGSIZE.
;
;ENTRY	(A) = LOWER 4 BITS TO BE DISPLAYED
;	(C) = CARRY CLEAR IF NO ZERO SUPPRESSION
;EXIT	(C) = CARRY CLEARED IF NON-ZERO DIGIT DISPLAYED
;USES	A,X,Y,(VGLIST,VGLIST+1)

VGHEXZ:	BCC VGHEX		;IF NO ZERO SUPPRESSION
	AND I,0F
	BEQ VGHEX1		;LEAVE C SET


	.SBTTL VGHEX - DISPLAY DIGIT
;VGHEX - DISPLAY DIGIT
;
;THIS ROUTINE WILL DISPLAY A DIGIT USING THE DEFAULT CHARACTER SIZE.
;NO ATTEMPT IS MADE TO USE THE VARIABLE VGSIZE.
;
;ENTRY	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;	(A) = LOWER 4 BITS TO BE DISPLAYED
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;	(C) = CARRY IS CLEAR
;USES	A,X,Y,(VGLIST,VGLIST+1)

VGHEX:	AND I,0F
	CLC
	ADC I,01		;CLEARS C BIT
VGHEX1:	PHP			;SAVE C FLAG
	ASL
	LDY I,0
	TAX
	LDA AX,VGMSGA
	STA NY,VGLIST
	LDA AX,VGMSGA+1		;COPY JSRL TO CHARACTER ROUTINE
	INY
	STA NY,VGLIST
	JSR VGADD		;UPDATE VECTOR LIST POINTER
	PLP			;RESTORE C FLAG
	RTS
	.SBTTL VGJSRL - ADD JSRL TO VECTOR LIST
;VGJSRL - ADD JSRL TO VECTOR LIST
;
;ENTRY	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;	(A) = MSB OF ADDRESS
;	(X) = LSB OF ADDRESS
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;USES	A,Y,(VGLIST,VGLIST+1)

VGJSRL:	LSR
	AND I,0F		;BASE ADDRESS IS RELATIVE
	ORA I,0A0
	LDY I,01
	STA NY,VGLIST		;SAVE MSB + OPCODE
	DEY
	TXA
	ROR
	STA NY,VGLIST		;LSB OF ADDRESS
	INY
	BNE VGADD		;UPDATE VECTOR POINTER


	.SBTTL VGSTAT - SET VECTOR GENERATOR STATUS
;VGSTAT - SET VECTOR GENERATOR STATUS
;
;ENTRY	(A)=HI/LOW AND IN/OUT FLAGS AND ENABLE (0,1,2,3,OR 4)
;	(Y)=VECTOR BRIGHTNESS (0,10,20,...,F0)
;	(VGLIST,VGLIST+1)=VECTOR LIST ADDRESS
;EXIT	(VGLIST,VGLIST+1)=NEW VECTOR LIST ADDRESS
;USES	A,X,Y,(VGLIST,VGLIST+1)

VGSTA1:	LDY VGBRIT
VGSTAT:	ORA I,60
	TAX			;OPCODE + LIMIT BITS
	TYA
	JMP VGADD2		;ADD 2 BYTES TO VECTOR LIST


	.SBTTL VGCNTR - CENTER BEAM IN MIDDLE OF SCREEN
;VGCNTR - CENTER BEAM IN MIDDLE OF SCREEN
;
;ENTRY	(VGLIST,VGLIST+1)=VECTOR LIST ADDRESS
;USES	A,X,Y,(VGLIST,VGLIST+1)
;

VGCNTR:	LDA I,40		;TIMER + SCALE
	LDX I,80		;OPCODE
;	JMP VGADD2


	.SBTTL VGADD2 - ADD 2 WORDS TO VECTOR LIST
;VGADD2 - ADD 2 WORDS TO VECTOR LIST
;
;ENTRY	(A)=FIRST BYTE
;	(X)=SECOND BYTE
;EXIT	(VGLIST,VGLIST+1)=NEW VECTOR LIST POINTER
;USES	A,Y,(VGLIST,VGLIST+1)

VGADD2:	LDY I,0
VGADD3:	STA NY,VGLIST		;LSB BYTE
	INY
	TXA
	STA NY,VGLIST		;MSB BYTE
;	JMP VGADD		;UPDATE VECTOR LIST POINTER


	.SBTTL VGADD - ADD Y+1 TO VECTOR ADDRESS
;VGADD - ADD Y+1 TO VECTOR LIST ADDRESS
;
;ENTRY	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;	(Y) = VALUE+1 TO BE ADDED TO VECTOR LIST
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;USES	A,(VGLIST,VGLIST+1)

VGADD:	TYA			;ADD 1+(Y) TO VGLIST
	SEC
	ADC VGLIST
	STA VGLIST
	BCC 10$
	INC VGLIST+1
10$:	RTS
	
	
	.SBTTL VGSCAL-SET VECTOR GENERATOR SCALE
;VGSCAL-SET VECTOR GENERATOR SCALE
;
;ENTRY	(Y)=LINEAR SCALE FACTOR (0=FULL SIZE, FF=1/256 SIZE)
;	(A)=POWER OF 2 SCALE FACTOR (0=FULL SIZE,1=1/2 SIZE,...)
;	(VGLIST,VGLIST+1)=VECTOR LIST ADDRESS
;EXIT	(VGLIST,VGLIST+1)=NEW VECTOR LIST ADDRESS
;USES	A,X,Y(VGLIST,VGLIST+1)
	
VGSCA1:	LDY I,0			;USE FULL SIZE
VGSCAL:	ORA I,70		;OPCODE + SCALE SIZE
	TAX
	TYA
	JMP VGADD2		;ADD 2 BYTES TO VECTOR LIST

	.SBTTL VGVTR - SHORT FORM VGVCTR CALL
;VGVTR - SHORT FORM VGVCTR CALL
;
;ENTRY	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;	(A) = CHANGE IN X/4 (-80 TO +7F)
;	(X) = CHANGE IN Y/4 (-80 TO +7F)
;	(Y) = VECTOR BRIGHTNESS (0,10,20,...,F0)
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;	(VGBRIT)=NEW VECTOR BRIGHTNESS
;USES	A,X,Y,(VGLIST,VGLIST+1),(XCOMP,XCOMP+3)

VGVTR:	STY VGBRIT
VGVTR1:	LDY I,0
	ASL
	BCC 10$			;SIGN EXTEND
	DEY			;Y=-1
10$:	STY XCOMP+1		;WITH SCALE=0 A=1 MEANS=DOTS ON XY
	ASL
	ROL XCOMP+1
	STA XCOMP
	TXA			;WRITE Y VALUE TO XCOMP+2,XCOMP+3
	ASL
	LDY I,0
	BCC 20$			;SIGN EXTEND
	DEY			;Y=-1
20$:	STY XCOMP+3
	ASL
	ROL XCOMP+3
	STA XCOMP+2
VGVTR2:	LDX I,XCOMP
;	JMP VGVCTR		;GENERATE VECTOR


	.SBTTL VGVCTR - ADD VECTOR TO VECTOR LIST
;VGVCTR - ADD VECTOR TO VECTOR LIST
;
;NOTE:	IF THE NUMBERS GIVEN ARE MORE THAN
;	15 BITS IN SIGNIFICANCE THEN AN
;	INCORRECT VECTOR WILL BE GENERATED
;
;ENTRY	(X) =4 ZERO PAGE LOCN.  CONTAINING (X LSB,X MSB,Y MSB,Y LSB)
;	(VGLIST,VGLIST+1) = VECTOR LIST ADDRESS
;	(VGBRIT)=VECTOR BRIGHTNESS (ONLY THE UPPER 3 BITS ARE USED)
;EXIT	(VGLIST,VGLIST+1) = NEW VECTOR LIST ADDRESS
;USES	A,X,Y,(VGLIST,VGLIST+1)

VGVCTR:	LDY I,0
	LDA ZX,2		;Y LSB
	STA NY,VGLIST
	LDA ZX,3		;Y MSB
	AND I,1F		;CLEAR SIGN EXTENSION
	INY
	STA NY,VGLIST
	LDA ZX,0		;X LSB
	INY
	STA NY,VGLIST
	LDA ZX,1		;X MSB
	EOR VGBRIT
	AND I,1F		;CLEAR SIGN EXTENSION
	EOR VGBRIT		;COMBINE UPPER 3 BITS OF VGBRIT WITH X MSB
VGWAI1:	INY
	STA NY,VGLIST		;SET INTENSITY
	BNE VGADD		;ALWAYS - UPDATE VGLIST POINTER


	.SBTTL	DISPLAY DIGITS
;
; DIGITS - DISPLAY 2Y DIGIT NUMBER
;
; ENTRY	 (C)=CARRY SET FOR ZERO SUPPRESSION
;	 (A)=ADDRESS OF (Y) ZERO PAGE LOCATIONS CONTAINING NUMBER (LSB TO MSB)
;	 (Y)=NUMBER OF ZERO PAGE LOCATIONS TO USE (1 TO 256).
DIGTYS:	SEC
DIGITS:	PHP			;SAVE INPUT PARAMETERS
	DEY
	STY ZPNLOC
	CLC
	ADC ZPNLOC
	PLP
	TAX			;MSB OF DIGITS
	BEGIN
	PHP
	STX ZPOFFS		;SAVE DIGIT ZP OFFSET
	LDA ZX,0
	LSR
	LSR
	LSR
	LSR
	PLP
	JSR VGHEXZ		;FIRST DIGIT
	LDA ZPNLOC
	IFEQ
	CLC			;DISPLAY LAST DIGIT (EVEN 0)
	ENDIF
	LDX ZPOFFS
	LDA ZX,0
	JSR VGHEXZ		;SECOND DIGIT
	LDX ZPOFFS
	DEX
	DEC ZPNLOC
	MIEND			;LOOP FOR EACH SET OF DIGITS
	RTS
	HLL65
	.END

                                                                                                                                                                                                     