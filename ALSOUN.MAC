	.TITLE ALSOUN-ALIENS SOUNDS
	.NLIST
	.INCLUDE ALCOMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.LIST
	.PAGE
	.SBTTL GLOBLS
;ENTRY POINTS (AS SUBROUTINES)
	.GLOBL SNDON,MODSND,EXSNON,INISOU
	.GLOBL EXSNON
	.GLOBL SLAUNC,NWSNON,SELICO,SSLAMS
	.GLOBL ESLSON,SAUSON,SBOING,SOUTS2,SOUTS3,S3SWAR,PULSTR,PULSTO
				;
	.GLOBL IPEXPL,CCEXPL,CIEXPL,CPEXPL,QCHKS9;
	.ASECT
	.=0BF			;
SINDEX:	.BLKB 1
NCHANL	=10
	.PAGE
	.SBTTL SOUND DESCRIPTION
;THE FOLLOWING MUST BE DEFINED SOME WHERE IN YOUR RAM ALLOCATION
;SOUND ROUTINE VARIABLES
	
POINT:	.BLKB NCHANL			;POINTER OFFSET INTO DATA TABLES(IF 0, CHANNEL NOT ACTIVE)
CURRENT:.BLKB NCHANL			;OUTPUT VALUE
FRAMES:	.BLKB NCHANL			;FRAMES UNTIL NEXT CHANGE
COUNT:	.BLKB NCHANL			;COUNT OF TOTAL CHANGES
	.REPT 0
;*** NOTE: 'IDLEV' CAN BE REPLACED BY A 6 BYTE TABLE WITH
;          NO CHANGE TO THE CODE. USING RAM ALLOWS YOU TO 
;	   CHANGE THE OUTPUT SOUND WITHOUT USING 'STSOUND'
;	   BY SIMPLY PUTTING THE DESIRED SOUND INFORMATION
;	   INTO THE ABOVE 6 BYTE. THE SOUND ROUTINES WILL
;	   CONTINUE TO OUTPUT THIS 'FORCED' SOUND UNTIL
;	   YOU CALL 'STSOUND' OR PUT SOME OTHER VALUE INTO
;	   'IDLEV'. IF YOU USE A TABLE, THE FOLLOWING DATA
;	   IS RECOMENDED:
;	IDLEV:	.BYTE 0C0,0,1F,80,0FE,80
;*************************************************************
;
	.ENDR
;EACH TABLE ENTRY IS 4 BYTES DESCRIBING A SEQUENCE, CONSISTING OF:
STVAL	=0			;VALUE TO START SEQUENCE
FRCNT	=1			;# OF FRAMES BEFORE ANY CHANGE
CHANGE	=2			;AMOUNT OF CHANGE
NUMBER	=3			;TOTAL NUMBER OF CHANGES IN THIS SEQUENCE
AUDCTL	=POKEY+8
AUD2CT	=POKEY2+8
;EX1: 0FF,1,-1,6 DESCRIBES THE FOLLOWING SEQUENCE
;	0FF,0FE,0FD,0FC,0FB,0FA,0F9
;EX2: 0,45,0,1 WILL OUTPUT 0 FOR 46 FRAMES
;
	.PAGE
	.SBTTL OFFSET MACROS FOR SOUND ROUTINES
	.MACRO OFFSET,LABEL
	.IRPC X,<12345678>
	.IRPC Y,FA
	.IF DF,LABEL''X''Y
	.BYTE <LABEL''X''Y-SOUND>/2-2
	.IFF
	.BYTE 0
	.ENDC
	.ENDR
	.ENDR
	SID'LABEL=.-PNTRS-1
	.ENDM
;
;THE ABOVE MACRO GENERATES THE OFFSETS FROM THE 'SOUND' BASE ADDRESS
;FOR A CHANNEL OF DATA.
;IF LESS THAN 6 CHANNELS ARE USED, THE REMAINING POINTERS ARE SET TO 0
;A 0 VALUE POINTER INDICATES AN IDLE CHANNEL.
;
;EX: SOUND: .BYTE 0
;
;    CH1:   .BYTE 0,45,0,1
;    CH2:   .BYTE 0,45,0,2,3,7,9,1
;
;BY CALLING 'OFFSET CH' , THE FOLLOWING WILL BE PLACED IN LINE
;	    .BYTE CH1-SOUND
;	    .BYTE CH2-SOUND
;	    .BYTE 0,0,0,0
;
	.PAGE
	.SBTTL SOUND TABLES
;
;TABLES OF OFFSET POINTER FOR SOUNDS. (6 BYTES PER SOUND NUMBER)
	.CSECT
PNTRS:
	OFFSET LO		;CURSOR MOVES
	OFFSET EX		;ENEMY EXPLOSION
	OFFSET LA		;PLAYER FIRE
	OFFSET PU		;PULSATION
	OFFSET WP		;SPECIAL SCORE
	OFFSET DI		;PLAYER DIES
	OFFSET T2		;THRUST IN TUBE
	OFFSET T3		;THRUST IN SPACE
	OFFSET ES		;ENEMY SHOT
	OFFSET EL		;ENEMY LINE DESTRUCTION
	OFFSET SL		;SLAM
	OFFSET S3		;3 SECONDS LEFT WARNING
	OFFSET PO		;PULSAR OFF
PTLEN	=.-PNTRS
;AUDIO CONTROL CHANNEL VALUE (1 BYTE PRE SOUND NUMBER)
AUDCV	=00
AUDCV2	=00
	
;SOUND TABLES
				;ALL OF THESE LABELS GO
				;HRE SO THEY HAVE AN
				;OFFSET OF 0, WHICH
				;PREVENTS THE SOUND FROM
				;AFFECTING THOSE CHANNELS
				;WHICH HAVE AN OFFSET
				;OF 0
SOUND=.-6
	.PAGE
				;A GOOD PLACE FOR THE CHECKSUM
;DATA STRUCTURE:
;A CHANNEL CONSISTS OF A SERIES OF 4 BYTE SEQUENCES:
;	BYTE		FUNCTION
;	 1		 STARTING VALUE OF SEQUENCE
;	 2		 # OF FRAMES BEFORE NEXT CHANGE
;	 3		 AMOUNT OF CHANGE (SEE NOTE 1)
;	 4		 TOTAL NUMBER OF CHANGES+1 (# OF DIFFERENT VALUES)
;TO STOP A CHANNEL, PUT IN 0,0
;TO LOOP BACK, PUT IN X,0, WHERE X=
;<OFFSET FROM SOUND: OF RESTART LOC>/2
;NOTE 1: FOR NOISE/AMPLITUDE CHANNEL, AMPLITUDE WILL
;NOT OVERFLOW INTO NOISE
;
;EXPLOSION SOUND
;
T51F:	.BYTE 0C0,8,4,10
	.BYTE 0,0
T51A:	.BYTE 0A6,20,0F8,4
	.BYTE 0,0
T52F:	.BYTE 40,8,4,10
	.BYTE 0,0
T52A:	.BYTE 0A6,20,0FE,4
	.BYTE 0,0
;LAUNCH SOUND
LA3F:	.BYTE 10,1,7,20,0,0
LA3A:	.BYTE 0A2,1,0F8,20,0,0
;DIE

DI1F:
	.BYTE 8,4,20,0A
	.BYTE 8,4,1,9
	.BYTE 10,0D,4,0C
	.BYTE 0,0
DI1A:
	.BYTE 08,4,0,0A
	.BYTE 068,4,0,9
	.BYTE 68,12,0FF,9
	.BYTE 0,0
;BONUS SOUND
WP4F:	.BYTE 40,1,0,1
	.BYTE 40,1,0FF,40
	.BYTE 30,1,0FF,30
	.BYTE 20,1,0FF,20
	.BYTE 18,1,0FF,18
	.BYTE 14,1,0FF,14
	.BYTE 12,1,0FF,12
	.BYTE 10,1,0FF,10
	.BYTE 0,0
WP4A:	.BYTE 0A8,93,0,2
	.BYTE 0,0
;CURSOR CROSSED A LINE
LO5F:	.BYTE 0F,4,0,1
	.BYTE 0,0
LO5A:	.BYTE 0A2,4,40,1
	.BYTE 0,0
ES8F:	.BYTE 0,3,2,9			;ENEMY SHOT
	.BYTE 0,0
ES8A:	.BYTE 8,3,0FF,9
	.BYTE 0,0
EL7F:	.BYTE 80,1,0E8,5		;ENEMY LINE DESTRUCTION
	.BYTE 0,0
EL7A:	.BYTE 0A1,1,1,5
	.BYTE 0,0
EX2F:	.BYTE 1,8,2,10		;ENEMY EXPLOSION
	.BYTE 0,0
EX2A:	.BYTE 86,20,0,4
	.BYTE 0,0
SL1F:	.BYTE 18,4,0,0FF	;SLAM SOUND
	.BYTE 0,0
SL1A:	.BYTE 0AF,4,0,0FF
	.BYTE 0,0
T26F:	.BYTE 0C0,02,0FF,0FF		;THRUST SOUND ON TUBE
	.BYTE 0,0
T26A:	.BYTE 28,02,00,0F0	;
	.BYTE 0,0
T36F:	.BYTE 10,0B,1,40	;THRUST SOUND IN SPACE
	.BYTE 0,0
T36A:	.BYTE 86,40,0,0B
	.BYTE 0,0
S31F:	.BYTE 20,80,0,3,0,0	;3 SECOND WARNING
S31A:	.BYTE 0A8,40,0F8,6,0,0
;PULSATION SOUND ON
PU6F:
	.BYTE 0B0,02,0,0FF
	.BYTE 0,0
PU6A:
	.BYTE 0C8,1,2,0FF
	.BYTE 0C8,1,2,0FF
	.BYTE 0,0
;
PO6F:				;TURN PULSATION OFF
PO6A:	.BYTE 0C0,1,0,1
	.BYTE 0,0
CHKSM9::	.BYTE QCHKS9
	.PAGE
IPEXPL:
CPEXPL:	LDA I,SIDDI		;PLAYER DIES
	JMP SNDON
SBOING:	LDA I,SIDLO		;CURSOR MOVES
	BNE SNDON
SAUSON:	LDA I,SIDWP		;SPECIAL SCORE SOUND
	BNE SNDON
ESLSON:	LDA I,SIDES		;ENEMY SHOT
	BNE SNDON
CCEXPL:
CIEXPL:
EXSNON:	LDA I,SIDEX		;EXPLOSION
SNDON:	BIT QSTATUS		;ATTRACT MODE?
	IFMI			;NO, OK TO START A SOUND
FSNDON:	STX MTEMP
	STY MTEMP+1
	TAY			;USE AS INDEX
	LDX I,NCHANL-1			;NO.
	BEGIN			;--;LOOP FOR EACH 1/2 CHANNEL
	LDA Y,PNTRS
	IFNE			;IF POINTER 0 DONT TOUCH THIS CHANNEL
	STX SINDEX
	STA X,POINT		;IF NOT SET UP POINTER 
	LDA I,1
	STA X,FRAMES		;DUMMY START, NO SOUND
	STA X,COUNT		;TILL MODSND STORES TO POKEY
	LDA I,-1
	STA SINDEX
	THEN
	DEY
	DEX
	MIEND
	LDX MTEMP		;RESTORE X & Y UPON RETURN
	LDY MTEMP+1
	THEN
NWSNON:	RTS
SLAUNC:	LDA I,SIDLA		;LAUNCH SOUND - PLAYER FIRE
	BNE SNDON
SOUTS2:	LDA I,SIDT2		;THRUST ON TUBE
	BNE SNDON
SOUTS3:	LDA I,SIDT3		;THRUST IN SPACE
	BNE SNDON
SELICO:	LDA I,SIDEL		;ENEMY LINE DESTRUCTION SOUND
	BNE SNDON
SSLAMS:	LDA I,SIDSL		;SLAM SOUND
	BNE FSNDON
S3SWAR:	LDA I,SIDS3		;3 SECONDS WARNING
	BNE SNDON
PULSTR:	LDA I,SIDPU		;PULSATION
	BNE SNDON
PULSTO:	LDA I,SIDPO		;PULSATION OFF
	BNE SNDON
	.PAGE
	.SBTTL SOUND ROUTINE
;
;CONTINUES A PREVIOUSLY STARTED SOUND
;WHEN CHANNEL 1 GOES IDLE, ALL SOUND ENDS
;
MODSND:
	LDX I,NCHANL-1			;8 CHANNELS
	BEGIN
	LDA X,POINT
	IFNE			;1 SET OF FRAMES EXPIRED?
	CPX SINDEX
	IFNE
	DEC X,FRAMES		;YES
	IFEQ			;SUBCHANNEL ACTIVE?
	DEC X,COUNT		;YES.
	IFEQ			;MOVE TO NEXT CHANGE GROUP?
RESOUN:	INC X,POINT		;YES. START VALUE
	INC X,POINT
	LDA X,POINT
	ASL
	TAY
	IFCC
	LDA Y,SOUND+STVAL
	STA X,CURRENT
	LDA Y,SOUND+NUMBER
	STA X,COUNT
	LDA Y,SOUND+FRCNT
	ELSE
	LDA Y,SOUND+STVAL+100
	STA X,CURRENT
	LDA Y,SOUND+NUMBER+100
	STA X,COUNT
	LDA Y,SOUND+FRCNT+100
	ENDIF
	STA X,FRAMES
	IFEQ			;CHANNEL STILL ALIVE?
	STA X,POINT		;NO. KILL IT
	LDA X,CURRENT
	IFNE			;RESTART CHANNEL?
	STA X,POINT		;YES. UPDATE PTR. WITH RESTART LOC
	BNE RESOUN
	ENDIF
	ENDIF			;
	ELSE			;NO. MAKE CHANGE IN OLD GROUP
	ASL
	TAY
	IFCC
	LDA Y,SOUND+FRCNT
	STA X,FRAMES
	LDA Y,SOUND+CHANGE
	ELSE
	LDA Y,SOUND+FRCNT+100
	STA X,FRAMES
	LDA Y,SOUND+CHANGE+100
	ENDIF
	LDY X,CURRENT
	CLC
	ADC X,CURRENT
	STA X,CURRENT
	TXA
	LSR
	IFCS
	TYA
	EOR X,CURRENT
	AND I,0F0
	EOR X,CURRENT
	STA X,CURRENT
	ENDIF
	ENDIF
	LDA X,CURRENT		;UPDATE POKEY AUDIO CHANNEL
	CPX I,8
	IFCS
	STA X,AUDF2-8
	ELSE
	STA X,AUDF1
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	DEX
	MIEND
	RTS
	.PAGE
INISOU:	LDA I,0
	STA A,AUDF1+0F
	STA AUDF2+0F
	STA QT4
ZPOKST::	LDX I,4			;STOP POKEYS
	LDA RANDOM
	LDY RANDO2
	BEGIN
	CMP RANDOM
	IFEQ
	CPY RANDO2
	ENDIF
	IFNE			;HALTED POKEYS?
	STA QT4
	LDX I,0
	ENDIF
	DEX
	MIEND
	LDA I,7
	STA A,AUDF1+0F
	STA AUDF2+0F
	LDX I,7
	LDA I,0
	BEGIN
	STA AX,AUDF1
	STA X,AUDF2
	STA X,POINT
	STA X,CURRENT
	DEX
	MIEND
	LDA I,AUDCV
	STA AUDCTL
	LDA I,AUDCV2
	STA AUD2CT
	RTS
	HLL65
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       